// src/lib/cookie.ts
import { isBrowserLike } from "@stackframe/stack-shared/dist/utils/env";
import { StackAssertionError } from "@stackframe/stack-shared/dist/utils/errors";
import Cookies from "js-cookie";
import { calculatePKCECodeChallenge, generateRandomCodeVerifier, generateRandomState } from "oauth4webapi";
function ensureClient() {
  if (!isBrowserLike()) {
    throw new Error("cookieClient functions can only be called in a browser environment, yet window is undefined");
  }
}
async function createPlaceholderCookieHelper() {
  function throwError() {
    throw new StackAssertionError("Throwing cookie helper is just a placeholder. This should never be called");
  }
  return {
    get: throwError,
    set: throwError,
    setOrDelete: throwError,
    delete: throwError
  };
}
async function createCookieHelper() {
  if (isBrowserLike()) {
    return createBrowserCookieHelper();
  } else {
    return await createPlaceholderCookieHelper();
  }
}
function createBrowserCookieHelper() {
  return {
    get: getCookieClient,
    set: setCookieClient,
    setOrDelete: setOrDeleteCookieClient,
    delete: deleteCookieClient
  };
}
function getCookieClient(name) {
  ensureClient();
  Cookies.set("stack-is-https", "true", { secure: true });
  return Cookies.get(name) ?? null;
}
async function getCookie(name) {
  const cookieHelper = await createCookieHelper();
  return cookieHelper.get(name);
}
function setOrDeleteCookieClient(name, value, options = {}) {
  ensureClient();
  if (value === null) {
    deleteCookieClient(name, options);
  } else {
    setCookieClient(name, value, options);
  }
}
async function setOrDeleteCookie(name, value, options = {}) {
  const cookieHelper = await createCookieHelper();
  cookieHelper.setOrDelete(name, value, options);
}
function deleteCookieClient(name, options = {}) {
  ensureClient();
  Cookies.remove(name);
}
async function deleteCookie(name, options = {}) {
  const cookieHelper = await createCookieHelper();
  cookieHelper.delete(name, options);
}
function setCookieClient(name, value, options = {}) {
  ensureClient();
  Cookies.set(name, value, {
    expires: options.maxAge === void 0 ? void 0 : new Date(Date.now() + options.maxAge * 1e3)
  });
}
async function setCookie(name, value, options = {}) {
  const cookieHelper = await createCookieHelper();
  cookieHelper.set(name, value, options);
}
async function saveVerifierAndState() {
  const codeVerifier = generateRandomCodeVerifier();
  const codeChallenge = await calculatePKCECodeChallenge(codeVerifier);
  const state = generateRandomState();
  await setCookie("stack-oauth-outer-" + state, codeVerifier, { maxAge: 60 * 60 });
  return {
    codeChallenge,
    state
  };
}
function consumeVerifierAndStateCookie(state) {
  ensureClient();
  const cookieName = "stack-oauth-outer-" + state;
  const codeVerifier = getCookieClient(cookieName);
  if (!codeVerifier) {
    return null;
  }
  deleteCookieClient(cookieName);
  return {
    codeVerifier
  };
}
export {
  consumeVerifierAndStateCookie,
  createBrowserCookieHelper,
  createCookieHelper,
  createPlaceholderCookieHelper,
  deleteCookie,
  deleteCookieClient,
  getCookie,
  getCookieClient,
  saveVerifierAndState,
  setCookie,
  setCookieClient,
  setOrDeleteCookie,
  setOrDeleteCookieClient
};
//# sourceMappingURL=cookie.js.map