{"version":3,"sources":["../../../../../../src/lib/stack-app/apps/interfaces/admin-app.ts"],"sourcesContent":["\n//===========================================\n// THIS FILE IS AUTO-GENERATED FROM TEMPLATE. DO NOT EDIT IT DIRECTLY\n//===========================================\nimport { ChatContent } from \"@stackframe/stack-shared/dist/interface/admin-interface\";\nimport type { AdminTransaction } from \"@stackframe/stack-shared/dist/interface/crud/transactions\";\nimport { InternalSession } from \"@stackframe/stack-shared/dist/sessions\";\nimport { Result } from \"@stackframe/stack-shared/dist/utils/results\";\nimport { AsyncStoreProperty, EmailConfig } from \"../../common\";\nimport { AdminSentEmail } from \"../../email\";\nimport { InternalApiKey, InternalApiKeyCreateOptions, InternalApiKeyFirstView } from \"../../internal-api-keys\";\nimport { AdminProjectPermission, AdminProjectPermissionDefinition, AdminProjectPermissionDefinitionCreateOptions, AdminProjectPermissionDefinitionUpdateOptions, AdminTeamPermission, AdminTeamPermissionDefinition, AdminTeamPermissionDefinitionCreateOptions, AdminTeamPermissionDefinitionUpdateOptions } from \"../../permissions\";\nimport { AdminProject } from \"../../projects\";\nimport { _StackAdminAppImpl } from \"../implementations\";\nimport { StackServerApp, StackServerAppConstructorOptions } from \"./server-app\";\n\n\nexport type StackAdminAppConstructorOptions<HasTokenStore extends boolean, ProjectId extends string> = (\n  | (\n    & StackServerAppConstructorOptions<HasTokenStore, ProjectId>\n    & {\n      superSecretAdminKey?: string,\n    }\n  )\n  | (\n    & Omit<StackServerAppConstructorOptions<HasTokenStore, ProjectId>, \"publishableClientKey\" | \"secretServerKey\">\n    & {\n      projectOwnerSession: InternalSession,\n    }\n  )\n);\n\n\nexport type StackAdminApp<HasTokenStore extends boolean = boolean, ProjectId extends string = string> = (\n  & AsyncStoreProperty<\"project\", [], AdminProject, false>\n  & AsyncStoreProperty<\"internalApiKeys\", [], InternalApiKey[], true>\n  & AsyncStoreProperty<\"teamPermissionDefinitions\", [], AdminTeamPermissionDefinition[], true>\n  & AsyncStoreProperty<\"projectPermissionDefinitions\", [], AdminProjectPermissionDefinition[], true>\n  & AsyncStoreProperty<\"emailThemes\", [], { id: string, displayName: string }[], true>\n  & AsyncStoreProperty<\"emailPreview\", [{ themeId?: string | null | false, themeTsxSource?: string, templateId?: string, templateTsxSource?: string }], string, false>\n  & AsyncStoreProperty<\"emailTemplates\", [], { id: string, displayName: string, themeId?: string, tsxSource: string }[], true>\n  & AsyncStoreProperty<\"emailDrafts\", [], { id: string, displayName: string, themeId: string | undefined | false, tsxSource: string, sentAt: Date | null }[], true>\n  & AsyncStoreProperty<\"stripeAccountInfo\", [], { account_id: string, charges_enabled: boolean, details_submitted: boolean, payouts_enabled: boolean } | null, false>\n  & AsyncStoreProperty<\n    \"transactions\",\n    [\n      { cursor?: string, limit?: number, type?: 'subscription' | 'one_time' | 'item_quantity_change', customerType?: 'user' | 'team' | 'custom' }\n    ],\n    { transactions: AdminTransaction[], nextCursor: string | null },\n    true\n  >\n  & {\n    createInternalApiKey(options: InternalApiKeyCreateOptions): Promise<InternalApiKeyFirstView>,\n\n    createTeamPermissionDefinition(data: AdminTeamPermissionDefinitionCreateOptions): Promise<AdminTeamPermission>,\n    updateTeamPermissionDefinition(permissionId: string, data: AdminTeamPermissionDefinitionUpdateOptions): Promise<void>,\n    deleteTeamPermissionDefinition(permissionId: string): Promise<void>,\n\n    createProjectPermissionDefinition(data: AdminProjectPermissionDefinitionCreateOptions): Promise<AdminProjectPermission>,\n    updateProjectPermissionDefinition(permissionId: string, data: AdminProjectPermissionDefinitionUpdateOptions): Promise<void>,\n    deleteProjectPermissionDefinition(permissionId: string): Promise<void>,\n\n    useSvixToken(): string, // THIS_LINE_PLATFORM react-like\n\n    sendTestEmail(options: {\n      recipientEmail: string,\n      emailConfig: EmailConfig,\n    }): Promise<Result<undefined, { errorMessage: string }>>,\n\n    sendSignInInvitationEmail(email: string, callbackUrl: string): Promise<void>,\n\n    listSentEmails(): Promise<AdminSentEmail[]>,\n\n    useEmailTheme(id: string): { displayName: string, tsxSource: string }, // THIS_LINE_PLATFORM react-like\n    createEmailTheme(displayName: string): Promise<{ id: string }>,\n    updateEmailTheme(id: string, tsxSource: string): Promise<void>,\n\n    sendChatMessage(\n      threadId: string,\n      contextType: \"email-theme\" | \"email-template\" | \"email-draft\",\n      messages: Array<{ role: string, content: any }>,\n      abortSignal?: AbortSignal,\n    ): Promise<{ content: ChatContent }>,\n    saveChatMessage(threadId: string, message: any): Promise<void>,\n    listChatMessages(threadId: string): Promise<{ messages: Array<any> }>,\n    updateEmailTemplate(id: string, tsxSource: string, themeId: string | null | false): Promise<{ renderedHtml: string }>,\n    createEmailTemplate(displayName: string): Promise<{ id: string }>,\n\n    setupPayments(): Promise<{ url: string }>,\n    createStripeWidgetAccountSession(): Promise<{ client_secret: string }>,\n    createEmailDraft(options: { displayName: string, themeId?: string | undefined | false, tsxSource?: string }): Promise<{ id: string }>,\n    updateEmailDraft(id: string, data: { displayName?: string, themeId?: string | undefined | false, tsxSource?: string }): Promise<void>,\n    createItemQuantityChange(options: (\n      { userId: string, itemId: string, quantity: number, expiresAt?: string, description?: string } |\n      { teamId: string, itemId: string, quantity: number, expiresAt?: string, description?: string } |\n      { customCustomerId: string, itemId: string, quantity: number, expiresAt?: string, description?: string }\n    )): Promise<void>,\n    testModePurchase(options: { priceId: string, fullCode: string, quantity?: number }): Promise<void>,\n  }\n  & StackServerApp<HasTokenStore, ProjectId>\n);\nexport type StackAdminAppConstructor = {\n  new <\n    HasTokenStore extends boolean,\n    ProjectId extends string\n  >(options: StackAdminAppConstructorOptions<HasTokenStore, ProjectId>): StackAdminApp<HasTokenStore, ProjectId>,\n  new (options: StackAdminAppConstructorOptions<boolean, string>): StackAdminApp<boolean, string>,\n};\nexport const StackAdminApp: StackAdminAppConstructor = _StackAdminAppImpl;\n"],"mappings":";AAaA,SAAS,0BAA0B;AA+F5B,IAAM,gBAA0C;","names":[]}