// src/components/profile-image-editor.tsx
import { fileToBase64 } from "@stackframe/stack-shared/dist/utils/base64";
import { runAsynchronouslyWithAlert } from "@stackframe/stack-shared/dist/utils/promises";
import { Button, Slider, Typography } from "@stackframe/stack-ui";
import imageCompression from "browser-image-compression";
import { Upload } from "lucide-react";
import { useCallback, useState } from "react";
import Cropper from "react-easy-crop";
import { useTranslation } from "../lib/translations.js";
import { UserAvatar } from "./elements/user-avatar.js";
import { jsx, jsxs } from "react/jsx-runtime";
async function checkImageUrl(url) {
  try {
    const res = await fetch(url, { method: "HEAD" });
    const buff = await res.blob();
    return buff.type.startsWith("image/");
  } catch (e) {
    return false;
  }
}
var createImage = (url) => new Promise((resolve, reject) => {
  const image = new Image();
  image.addEventListener("load", () => resolve(image));
  image.addEventListener("error", (error) => reject(error));
  image.setAttribute("crossOrigin", "anonymous");
  image.src = url;
});
async function getCroppedImg(imageSrc, pixelCrop) {
  const image = await createImage(imageSrc);
  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  if (!ctx) {
    return null;
  }
  const safeCrop = {
    x: Math.max(0, pixelCrop.x),
    y: Math.max(0, pixelCrop.y),
    width: Math.max(1, pixelCrop.width),
    height: Math.max(1, pixelCrop.height)
  };
  canvas.width = safeCrop.width;
  canvas.height = safeCrop.height;
  ctx.drawImage(
    image,
    safeCrop.x,
    safeCrop.y,
    safeCrop.width,
    safeCrop.height,
    0,
    0,
    safeCrop.width,
    safeCrop.height
  );
  return canvas.toDataURL("image/jpeg");
}
function ProfileImageEditor(props) {
  const { t } = useTranslation();
  const [rawUrl, setRawUrl] = useState(null);
  const [error, setError] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);
  function reset() {
    setRawUrl(null);
    setError(null);
    setCrop({ x: 0, y: 0 });
    setZoom(1);
    setCroppedAreaPixels(null);
  }
  const onCropChange = useCallback((crop2) => {
    setCrop(crop2);
  }, []);
  const onCropComplete = useCallback((croppedArea, croppedAreaPixels2) => {
    setCroppedAreaPixels(croppedAreaPixels2);
  }, []);
  const onZoomChange = useCallback((zoom2) => {
    setZoom(zoom2);
  }, []);
  function upload() {
    const input = document.createElement("input");
    input.type = "file";
    input.onchange = (e) => {
      const file = e.target.files?.[0];
      if (!file) return;
      runAsynchronouslyWithAlert(async () => {
        const rawUrl2 = await fileToBase64(file);
        if (await checkImageUrl(rawUrl2)) {
          setRawUrl(rawUrl2);
          setError(null);
        } else {
          setError(t("Invalid image"));
        }
        input.remove();
      });
    };
    input.click();
  }
  if (!rawUrl) {
    return /* @__PURE__ */ jsxs("div", { className: "flex flex-col", children: [
      /* @__PURE__ */ jsxs("div", { className: "cursor-pointer relative", onClick: upload, children: [
        /* @__PURE__ */ jsx(
          UserAvatar,
          {
            size: 60,
            user: props.user,
            border: true
          }
        ),
        /* @__PURE__ */ jsx("div", { className: "absolute top-0 left-0 h-[60px] w-[60px] bg-gray-500/20 backdrop-blur-sm items-center justify-center rounded-full flex opacity-0 hover:opacity-100 transition-opacity", children: /* @__PURE__ */ jsx("div", { className: "bg-background p-2 rounded-full", children: /* @__PURE__ */ jsx(Upload, { className: "h-5 w-5" }) }) })
      ] }),
      error && /* @__PURE__ */ jsx(Typography, { variant: "destructive", type: "label", children: error })
    ] });
  }
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center gap-4", children: [
    /* @__PURE__ */ jsx("div", { className: "relative w-64 h-64", children: /* @__PURE__ */ jsx(
      Cropper,
      {
        image: rawUrl || props.user.profileImageUrl || "",
        crop,
        zoom,
        aspect: 1,
        cropShape: "round",
        showGrid: false,
        onCropChange,
        onCropComplete,
        onZoomChange
      }
    ) }),
    /* @__PURE__ */ jsx(
      Slider,
      {
        min: 1,
        max: 3,
        step: 0.1,
        value: [zoom],
        onValueChange: (v) => onZoomChange(v[0])
      }
    ),
    /* @__PURE__ */ jsxs("div", { className: "flex flex-row gap-2", children: [
      /* @__PURE__ */ jsx(
        Button,
        {
          onClick: async () => {
            if (rawUrl && croppedAreaPixels) {
              const croppedImageUrl = await getCroppedImg(rawUrl, croppedAreaPixels);
              if (croppedImageUrl) {
                const compressedFile = await imageCompression(
                  await imageCompression.getFilefromDataUrl(croppedImageUrl, "profile-image"),
                  {
                    maxSizeMB: 0.1,
                    fileType: "image/jpeg"
                  }
                );
                const compressedUrl = await imageCompression.getDataUrlFromFile(compressedFile);
                await props.onProfileImageUrlChange(compressedUrl);
                reset();
              } else {
                setError(t("Could not crop image."));
              }
            }
          },
          children: t("Save")
        }
      ),
      /* @__PURE__ */ jsx(
        Button,
        {
          variant: "secondary",
          onClick: reset,
          children: t("Cancel")
        }
      )
    ] })
  ] });
}
export {
  ProfileImageEditor,
  checkImageUrl,
  getCroppedImg
};
//# sourceMappingURL=profile-image-editor.js.map