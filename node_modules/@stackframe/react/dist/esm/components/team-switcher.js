"use client";
"use client";

// src/components/team-switcher.tsx
import { StackAssertionError } from "@stackframe/stack-shared/dist/utils/errors";
import { runAsynchronouslyWithAlert } from "@stackframe/stack-shared/dist/utils/promises";
import {
  Button,
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
  Skeleton,
  Typography,
  cn
} from "@stackframe/stack-ui";
import { PlusCircle, Settings } from "lucide-react";
import { Suspense, useMemo } from "react";
import { useStackApp, useUser } from "../index.js";
import { useTranslation } from "../lib/translations.js";
import { TeamIcon } from "./team-icon.js";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
function TeamSwitcher(props) {
  return /* @__PURE__ */ jsx(Suspense, { fallback: /* @__PURE__ */ jsx(Fallback, {}), children: /* @__PURE__ */ jsx(Inner, { ...props }) });
}
function Fallback() {
  return /* @__PURE__ */ jsx(Skeleton, { className: "h-9 w-full max-w-64 stack-scope" });
}
function Inner(props) {
  const { t } = useTranslation();
  const appFromHook = useStackApp();
  const userFromHook = useUser();
  const app = props.mockUser ? {
    useProject: () => props.mockProject || { config: { clientTeamCreationEnabled: false } },
    useNavigate: () => () => {
    },
    // Mock navigate function
    urls: { accountSettings: "/account-settings" }
  } : appFromHook;
  const user = props.mockUser ? {
    selectedTeam: props.mockUser.team,
    useTeams: () => props.mockTeams || [],
    setSelectedTeam: async () => {
    }
    // Mock function
  } : userFromHook;
  const navigate = app.useNavigate();
  const project = app.useProject();
  const rawTeams = user?.useTeams();
  const selectedTeam = props.team || rawTeams?.find((team) => team.id === props.teamId);
  const teams = useMemo(() => rawTeams?.sort((a, b) => b.id === selectedTeam?.id ? 1 : -1), [rawTeams, selectedTeam]);
  return /* @__PURE__ */ jsxs(
    Select,
    {
      value: selectedTeam?.id || (props.allowNull ? "null-sentinel" : void 0),
      onValueChange: (value) => {
        runAsynchronouslyWithAlert(async () => {
          let team = null;
          if (value !== "null-sentinel") {
            team = teams?.find((team2) => team2.id === value) || null;
            if (!team) {
              throw new StackAssertionError("Team not found, this should not happen");
            }
          } else {
            team = null;
          }
          if (props.onChange) {
            await props.onChange(team);
          }
        });
      },
      children: [
        /* @__PURE__ */ jsx(SelectTrigger, { className: cn("stack-scope max-w-64", props.triggerClassName), children: /* @__PURE__ */ jsx(SelectValue, { placeholder: "Select team" }) }),
        /* @__PURE__ */ jsxs(SelectContent, { className: "stack-scope", children: [
          selectedTeam ? /* @__PURE__ */ jsxs(SelectGroup, { children: [
            /* @__PURE__ */ jsx(SelectLabel, { children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
              /* @__PURE__ */ jsx("span", { children: t("Current team") }),
              /* @__PURE__ */ jsx(
                Button,
                {
                  variant: "ghost",
                  size: "icon",
                  className: "h-6 w-6",
                  onClick: () => {
                    if (!props.mockUser) {
                      navigate(`${app.urls.accountSettings}#team-${selectedTeam.id}`);
                    }
                  },
                  children: /* @__PURE__ */ jsx(Settings, { className: "h-4 w-4" })
                }
              )
            ] }) }),
            /* @__PURE__ */ jsx(SelectItem, { value: selectedTeam.id, children: /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsx(TeamIcon, { team: selectedTeam }),
              /* @__PURE__ */ jsx(Typography, { className: "max-w-40 truncate", children: selectedTeam.displayName })
            ] }) })
          ] }) : void 0,
          props.allowNull && /* @__PURE__ */ jsx(SelectGroup, { children: /* @__PURE__ */ jsx(SelectItem, { value: "null-sentinel", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ jsx(TeamIcon, { team: "personal" }),
            /* @__PURE__ */ jsx(Typography, { className: "max-w-40 truncate", children: props.nullLabel || t("No team") })
          ] }) }) }),
          teams?.length ? /* @__PURE__ */ jsxs(SelectGroup, { children: [
            /* @__PURE__ */ jsx(SelectLabel, { children: t("Other teams") }),
            teams.filter((team) => team.id !== selectedTeam?.id).map((team) => /* @__PURE__ */ jsx(SelectItem, { value: team.id, children: /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsx(TeamIcon, { team }),
              /* @__PURE__ */ jsx(Typography, { className: "max-w-64 truncate", children: team.displayName })
            ] }) }, team.id))
          ] }) : null,
          !teams?.length && !props.allowNull ? /* @__PURE__ */ jsx(SelectGroup, { children: /* @__PURE__ */ jsx(SelectLabel, { children: t("No teams yet") }) }) : null,
          project.config.clientTeamCreationEnabled && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(SelectSeparator, {}),
            /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs(
              Button,
              {
                onClick: () => {
                  if (!props.mockUser) {
                    navigate(`${app.urls.accountSettings}#team-creation`);
                  }
                },
                className: "w-full",
                variant: "ghost",
                children: [
                  /* @__PURE__ */ jsx(PlusCircle, { className: "mr-2 h-4 w-4" }),
                  " ",
                  t("Create a team")
                ]
              }
            ) })
          ] })
        ] })
      ]
    }
  );
}
export {
  TeamSwitcher
};
//# sourceMappingURL=team-switcher.js.map