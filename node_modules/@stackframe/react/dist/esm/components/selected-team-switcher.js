"use client";
"use client";

// src/components/selected-team-switcher.tsx
import { runAsynchronouslyWithAlert } from "@stackframe/stack-shared/dist/utils/promises";
import {
  Skeleton
} from "@stackframe/stack-ui";
import { Suspense, useEffect } from "react";
import { useStackApp, useUser } from "../index.js";
import { TeamSwitcher } from "./team-switcher.js";
import { jsx } from "react/jsx-runtime";
function SelectedTeamSwitcher(props) {
  return /* @__PURE__ */ jsx(Suspense, { fallback: /* @__PURE__ */ jsx(Fallback, {}), children: /* @__PURE__ */ jsx(Inner, { ...props }) });
}
function Fallback() {
  return /* @__PURE__ */ jsx(Skeleton, { className: "h-9 w-full max-w-64 stack-scope" });
}
function Inner(props) {
  const appFromHook = useStackApp();
  const userFromHook = useUser();
  const app = props.mockUser ? {
    useProject: () => props.mockProject || { config: { clientTeamCreationEnabled: false } },
    useNavigate: () => () => {
    },
    // Mock navigate function
    urls: { accountSettings: "/account-settings" }
  } : appFromHook;
  const user = props.mockUser ? {
    selectedTeam: props.mockUser.selectedTeam,
    useTeams: () => props.mockTeams || [],
    setSelectedTeam: async () => {
    }
    // Mock function
  } : userFromHook;
  const navigate = app.useNavigate();
  useEffect(() => {
    if (!props.noUpdateSelectedTeam && props.selectedTeam && !props.mockUser) {
      runAsynchronouslyWithAlert(user?.setSelectedTeam(props.selectedTeam));
    }
  }, [props.noUpdateSelectedTeam, props.selectedTeam, props.mockUser]);
  return /* @__PURE__ */ jsx(
    TeamSwitcher,
    {
      team: props.selectedTeam,
      allowNull: props.allowNull,
      nullLabel: props.nullLabel,
      triggerClassName: props.triggerClassName,
      onChange: async (team) => {
        if (props.onChange) {
          props.onChange(team);
        }
        if (props.mockUser) return;
        if (!props.noUpdateSelectedTeam) {
          await user?.setSelectedTeam(team);
        }
        if (props.urlMap) {
          navigate(props.urlMap(team));
        }
      }
    }
  );
}
export {
  SelectedTeamSwitcher
};
//# sourceMappingURL=selected-team-switcher.js.map