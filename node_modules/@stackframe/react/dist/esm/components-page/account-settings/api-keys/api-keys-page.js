// src/components-page/account-settings/api-keys/api-keys-page.tsx
import { Button } from "@stackframe/stack-ui";
import { useState } from "react";
import { CreateApiKeyDialog, ShowApiKeyDialog } from "../../../components/api-key-dialogs.js";
import { ApiKeyTable } from "../../../components/api-key-table.js";
import { useUser } from "../../../lib/hooks.js";
import { useTranslation } from "../../../lib/translations.js";
import { PageLayout } from "../page-layout.js";
import { jsx, jsxs } from "react/jsx-runtime";
function ApiKeysPage(props) {
  const { t } = useTranslation();
  const isInMockMode = !!(props?.mockApiKeys || props?.mockMode);
  const userFromHook = useUser({ or: isInMockMode ? "return-null" : "redirect" });
  if (isInMockMode && !userFromHook) {
  }
  if (!isInMockMode && !userFromHook) {
    return null;
  }
  const mockApiKeysData = props?.mockApiKeys ? props.mockApiKeys.map((mockKey) => ({
    id: mockKey.id,
    description: mockKey.description,
    createdAt: new Date(mockKey.createdAt),
    expiresAt: mockKey.expiresAt ? new Date(mockKey.expiresAt) : void 0,
    manuallyRevokedAt: mockKey.manuallyRevokedAt ? new Date(mockKey.manuallyRevokedAt) : null,
    value: {
      lastFour: mockKey.id.slice(-4).padStart(4, "0")
      // Use last 4 chars of ID or pad with zeros
    },
    type: "user",
    userId: "mock-user-id",
    update: async () => {
      console.log("Mock API key update called");
    },
    revoke: async () => {
      console.log("Mock API key revoke called");
    },
    isValid: () => {
      const now = /* @__PURE__ */ new Date();
      const isExpired = mockKey.expiresAt ? new Date(mockKey.expiresAt) < now : false;
      const isRevoked = !!mockKey.manuallyRevokedAt;
      return !isExpired && !isRevoked;
    },
    whyInvalid: () => {
      const now = /* @__PURE__ */ new Date();
      if (mockKey.manuallyRevokedAt) return "manually-revoked";
      if (mockKey.expiresAt && new Date(mockKey.expiresAt) < now) return "expired";
      return null;
    }
  })) : [
    {
      id: "key-1",
      description: "Development Key",
      createdAt: new Date(Date.now() - 1728e5),
      // 2 days ago
      expiresAt: void 0,
      manuallyRevokedAt: null,
      value: {
        lastFour: "ey-1".slice(-4).padStart(4, "0")
      },
      type: "user",
      userId: "mock-user-id",
      update: async () => {
        console.log("Mock API key update called");
      },
      revoke: async () => {
        console.log("Mock API key revoke called");
      },
      isValid: () => true,
      whyInvalid: () => null
    }
  ];
  let apiKeys;
  if (isInMockMode) {
    apiKeys = mockApiKeysData;
  } else if (userFromHook) {
    apiKeys = userFromHook.useApiKeys();
  } else {
    apiKeys = [];
  }
  const [isNewApiKeyDialogOpen, setIsNewApiKeyDialogOpen] = useState(false);
  const [returnedApiKey, setReturnedApiKey] = useState(null);
  const CreateDialog = CreateApiKeyDialog;
  const ShowDialog = ShowApiKeyDialog;
  const handleCreateApiKey = async (data) => {
    if (isInMockMode) {
      const mockApiKey = {
        id: `key-${Date.now()}`,
        description: data.description,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        expiresAt: data.expiresAt?.toISOString(),
        value: "sk_dev_mock_key_" + Math.random().toString(36).substring(2),
        update: async () => {
          console.log("Mock API key update called");
        },
        revoke: async () => {
          console.log("Mock API key revoke called");
        },
        isValid: () => true,
        whyInvalid: () => null,
        type: "user",
        userId: "mock-user-id"
      };
      return mockApiKey;
    }
    if (!userFromHook) throw new Error("User not available");
    return await userFromHook.createApiKey(data);
  };
  return /* @__PURE__ */ jsxs(PageLayout, { children: [
    /* @__PURE__ */ jsx(Button, { onClick: () => setIsNewApiKeyDialogOpen(true), children: t("Create API Key") }),
    /* @__PURE__ */ jsx(ApiKeyTable, { apiKeys }),
    /* @__PURE__ */ jsx(
      CreateDialog,
      {
        open: isNewApiKeyDialogOpen,
        onOpenChange: setIsNewApiKeyDialogOpen,
        onKeyCreated: setReturnedApiKey,
        createApiKey: handleCreateApiKey,
        mockMode: isInMockMode
      }
    ),
    /* @__PURE__ */ jsx(
      ShowDialog,
      {
        apiKey: returnedApiKey,
        onClose: () => setReturnedApiKey(null)
      }
    )
  ] });
}
export {
  ApiKeysPage
};
//# sourceMappingURL=api-keys-page.js.map