{"version":3,"sources":["../../../../../src/components-page/account-settings/profile-page/profile-page.tsx"],"sourcesContent":["\n//===========================================\n// THIS FILE IS AUTO-GENERATED FROM TEMPLATE. DO NOT EDIT IT DIRECTLY\n//===========================================\nimport { ProfileImageEditor } from \"../../../components/profile-image-editor\";\nimport { useUser } from \"../../../lib/hooks\";\nimport { useTranslation } from \"../../../lib/translations\";\nimport { EditableText } from \"../editable-text\";\nimport { PageLayout } from \"../page-layout\";\nimport { Section } from \"../section\";\n\nexport function ProfilePage(props?: {\n  mockUser?: {\n    displayName?: string,\n    profileImageUrl?: string,\n  },\n}) {\n  const { t } = useTranslation();\n  const userFromHook = useUser({ or: props?.mockUser ? 'return-null' : 'redirect' });\n\n  // Use mock data if provided, otherwise use real user\n  const user = props?.mockUser ? {\n    displayName: props.mockUser.displayName || 'John Doe',\n    profileImageUrl: props.mockUser.profileImageUrl || null,\n    update: async () => {\n      // Mock update - do nothing in demo mode\n      console.log('Mock update called');\n    }\n  } : userFromHook;\n\n  if (!user) {\n    return null; // This shouldn't happen in practice\n  }\n\n  return (\n    <PageLayout>\n      <Section\n        title={t(\"User name\")}\n        description={t(\"This is a display name and is not used for authentication\")}\n      >\n        <EditableText\n          value={user.displayName || ''}\n          onSave={async (newDisplayName) => {\n            await user.update({ displayName: newDisplayName });\n          }}/>\n      </Section>\n\n      <Section\n        title={t(\"Profile image\")}\n        description={t(\"Upload your own image as your avatar\")}\n      >\n        <ProfileImageEditor\n          user={user as any}\n          onProfileImageUrlChange={async (profileImageUrl: string | null) => {\n            await user.update({ profileImageUrl });\n          }}\n        />\n      </Section>\n    </PageLayout>\n  );\n}\n"],"mappings":";AAIA,SAAS,0BAA0B;AACnC,SAAS,eAAe;AACxB,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAC7B,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AA0BpB,SAKI,KALJ;AAxBG,SAAS,YAAY,OAKzB;AACD,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,eAAe,QAAQ,EAAE,IAAI,OAAO,WAAW,gBAAgB,WAAW,CAAC;AAGjF,QAAM,OAAO,OAAO,WAAW;AAAA,IAC7B,aAAa,MAAM,SAAS,eAAe;AAAA,IAC3C,iBAAiB,MAAM,SAAS,mBAAmB;AAAA,IACnD,QAAQ,YAAY;AAElB,cAAQ,IAAI,oBAAoB;AAAA,IAClC;AAAA,EACF,IAAI;AAEJ,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,SACE,qBAAC,cACC;AAAA;AAAA,MAAC;AAAA;AAAA,QACC,OAAO,EAAE,WAAW;AAAA,QACpB,aAAa,EAAE,2DAA2D;AAAA,QAE1E;AAAA,UAAC;AAAA;AAAA,YACC,OAAO,KAAK,eAAe;AAAA,YAC3B,QAAQ,OAAO,mBAAmB;AAChC,oBAAM,KAAK,OAAO,EAAE,aAAa,eAAe,CAAC;AAAA,YACnD;AAAA;AAAA,QAAE;AAAA;AAAA,IACN;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QACC,OAAO,EAAE,eAAe;AAAA,QACxB,aAAa,EAAE,sCAAsC;AAAA,QAErD;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA,yBAAyB,OAAO,oBAAmC;AACjE,oBAAM,KAAK,OAAO,EAAE,gBAAgB,CAAC;AAAA,YACvC;AAAA;AAAA,QACF;AAAA;AAAA,IACF;AAAA,KACF;AAEJ;","names":[]}