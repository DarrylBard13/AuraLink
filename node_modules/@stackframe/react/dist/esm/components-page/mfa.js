"use client";
"use client";

// src/components-page/mfa.tsx
import { KnownErrors } from "@stackframe/stack-shared";
import {
  Button,
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
  Spinner,
  Typography,
  cn
} from "@stackframe/stack-ui";
import { CheckIcon } from "lucide-react";
import { useEffect, useMemo, useRef, useState } from "react";
import { useStackApp } from "../index.js";
import { FormWarningText } from "../components/elements/form-warning.js";
import { MaybeFullPage } from "../components/elements/maybe-full-page.js";
import { useTranslation } from "../lib/translations.js";
import { jsx, jsxs } from "react/jsx-runtime";
function MfaForm({ onSuccess, onCancel }) {
  const stackApp = useStackApp();
  const { t } = useTranslation();
  const [otp, setOtp] = useState("");
  const formRef = useRef(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);
  const [verified, setVerified] = useState(false);
  const [attemptCode, setAttemptCode] = useState(null);
  useEffect(() => {
    if (!attemptCode && typeof window !== "undefined") {
      const code = window.sessionStorage.getItem("stack_mfa_attempt_code");
      if (code) {
        setAttemptCode(code);
      }
    }
  }, [attemptCode]);
  useEffect(() => {
    if (otp.length === 6 && !submitting) {
      if (document.activeElement instanceof HTMLElement) {
        document.activeElement.blur();
      }
      if (formRef.current) {
        const inputs = formRef.current.querySelectorAll("input");
        for (const input of inputs) {
          input.blur();
        }
      }
      setSubmitting(true);
      setError(null);
      if (attemptCode) {
        stackApp.signInWithMfa(otp, attemptCode, { noRedirect: true }).then(async (result) => {
          if (result.status === "ok") {
            setVerified(true);
            if (typeof window !== "undefined") {
              window.sessionStorage.removeItem("stack_mfa_attempt_code");
            }
            if (onSuccess) {
              onSuccess();
            } else {
              await stackApp.redirectToAfterSignIn();
            }
          } else {
            throw result.error;
          }
        }).catch((e) => {
          if (e instanceof KnownErrors.InvalidTotpCode) {
            setError(t("Invalid TOTP code"));
          } else {
            setError(t("Verification failed"));
          }
        }).finally(() => {
          setSubmitting(false);
          if (!verified) {
            setOtp("");
          }
        });
      } else {
        setSubmitting(false);
        setError(t("Missing verification information"));
      }
    }
    if (otp.length !== 0 && otp.length !== 6) {
      setError(null);
    }
  }, [otp, submitting, onSuccess, attemptCode, stackApp, t, verified]);
  const inputStyleClass = useMemo(() => {
    if (verified) {
      return "opacity-85 transition-all duration-300";
    }
    if (error) {
      return "ring-red-500 border-red-500";
    }
    return "focus:ring-primary/50";
  }, [error, verified]);
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-stretch stack-scope", children: [
    /* @__PURE__ */ jsxs("form", { ref: formRef, className: "w-full flex flex-col items-center gap-4", children: [
      /* @__PURE__ */ jsx(
        InputOTP,
        {
          maxLength: 6,
          type: "text",
          inputMode: "numeric",
          placeholder: "\xB7\xB7\xB7\xB7\xB7\xB7",
          value: otp,
          onChange: (value) => setOtp(value.toUpperCase()),
          disabled: submitting || verified,
          children: /* @__PURE__ */ jsx(InputOTPGroup, { children: [0, 1, 2, 3, 4, 5].map((index) => /* @__PURE__ */ jsx(
            InputOTPSlot,
            {
              index,
              size: "lg",
              className: cn(
                "border focus:ring-2 transition-all",
                inputStyleClass
              )
            },
            index
          )) })
        }
      ),
      /* @__PURE__ */ jsxs("div", { className: "h-8 flex flex-col gap-4 items-center justify-center w-full", children: [
        verified ? /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2 animate-in fade-in duration-300 slide-in-from-bottom-2", children: [
          /* @__PURE__ */ jsx(CheckIcon, { className: "w-5 h-5 text-green-600 animate-in zoom-in duration-300" }),
          /* @__PURE__ */ jsx(Typography, { className: "text-sm font-medium", children: t("Verified! Redirecting...") })
        ] }) : submitting ? /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ jsx(Spinner, { className: "text-primary h-4 w-4" }),
          /* @__PURE__ */ jsx(Typography, { className: "text-sm", children: t("Verifying...") })
        ] }) : null,
        error !== null && !submitting && !verified ? /* @__PURE__ */ jsx(FormWarningText, { text: error }) : null
      ] })
    ] }),
    onCancel && !verified && /* @__PURE__ */ jsx(
      Button,
      {
        variant: "link",
        onClick: onCancel,
        className: "underline mt-4 self-center",
        disabled: submitting || verified,
        children: t("Cancel")
      }
    )
  ] });
}
function MFA(props) {
  const { t } = useTranslation();
  const headerText = t("Multi-Factor Authentication");
  const instructionText = t("Enter the six-digit code from your authenticator app");
  if (props.fullPage) {
    return /* @__PURE__ */ jsx(MaybeFullPage, { fullPage: true, children: /* @__PURE__ */ jsxs(
      "div",
      {
        className: "stack-scope flex flex-col items-stretch",
        style: { maxWidth: "380px", flexBasis: "380px", padding: "1rem" },
        children: [
          /* @__PURE__ */ jsxs("div", { className: "text-center mb-6", children: [
            /* @__PURE__ */ jsx(Typography, { type: "h2", children: headerText }),
            /* @__PURE__ */ jsx(Typography, { className: "mt-2", children: instructionText })
          ] }),
          /* @__PURE__ */ jsx(MfaForm, { onSuccess: props.onSuccess, onCancel: props.onCancel })
        ]
      }
    ) });
  }
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-stretch stack-scope", children: [
    /* @__PURE__ */ jsx(Typography, { className: "mb-4 text-center", children: instructionText }),
    /* @__PURE__ */ jsx(MfaForm, { onSuccess: props.onSuccess, onCancel: props.onCancel })
  ] });
}
export {
  MFA
};
//# sourceMappingURL=mfa.js.map