"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lib/cookie.ts
var cookie_exports = {};
__export(cookie_exports, {
  consumeVerifierAndStateCookie: () => consumeVerifierAndStateCookie,
  createBrowserCookieHelper: () => createBrowserCookieHelper,
  createCookieHelper: () => createCookieHelper,
  createPlaceholderCookieHelper: () => createPlaceholderCookieHelper,
  deleteCookie: () => deleteCookie,
  deleteCookieClient: () => deleteCookieClient,
  getCookie: () => getCookie,
  getCookieClient: () => getCookieClient,
  saveVerifierAndState: () => saveVerifierAndState,
  setCookie: () => setCookie,
  setCookieClient: () => setCookieClient,
  setOrDeleteCookie: () => setOrDeleteCookie,
  setOrDeleteCookieClient: () => setOrDeleteCookieClient
});
module.exports = __toCommonJS(cookie_exports);
var import_env = require("@stackframe/stack-shared/dist/utils/env");
var import_errors = require("@stackframe/stack-shared/dist/utils/errors");
var import_js_cookie = __toESM(require("js-cookie"));
var import_oauth4webapi = require("oauth4webapi");
function ensureClient() {
  if (!(0, import_env.isBrowserLike)()) {
    throw new Error("cookieClient functions can only be called in a browser environment, yet window is undefined");
  }
}
async function createPlaceholderCookieHelper() {
  function throwError() {
    throw new import_errors.StackAssertionError("Throwing cookie helper is just a placeholder. This should never be called");
  }
  return {
    get: throwError,
    set: throwError,
    setOrDelete: throwError,
    delete: throwError
  };
}
async function createCookieHelper() {
  if ((0, import_env.isBrowserLike)()) {
    return createBrowserCookieHelper();
  } else {
    return await createPlaceholderCookieHelper();
  }
}
function createBrowserCookieHelper() {
  return {
    get: getCookieClient,
    set: setCookieClient,
    setOrDelete: setOrDeleteCookieClient,
    delete: deleteCookieClient
  };
}
function getCookieClient(name) {
  ensureClient();
  import_js_cookie.default.set("stack-is-https", "true", { secure: true });
  return import_js_cookie.default.get(name) ?? null;
}
async function getCookie(name) {
  const cookieHelper = await createCookieHelper();
  return cookieHelper.get(name);
}
function setOrDeleteCookieClient(name, value, options = {}) {
  ensureClient();
  if (value === null) {
    deleteCookieClient(name, options);
  } else {
    setCookieClient(name, value, options);
  }
}
async function setOrDeleteCookie(name, value, options = {}) {
  const cookieHelper = await createCookieHelper();
  cookieHelper.setOrDelete(name, value, options);
}
function deleteCookieClient(name, options = {}) {
  ensureClient();
  import_js_cookie.default.remove(name);
}
async function deleteCookie(name, options = {}) {
  const cookieHelper = await createCookieHelper();
  cookieHelper.delete(name, options);
}
function setCookieClient(name, value, options = {}) {
  ensureClient();
  import_js_cookie.default.set(name, value, {
    expires: options.maxAge === void 0 ? void 0 : new Date(Date.now() + options.maxAge * 1e3)
  });
}
async function setCookie(name, value, options = {}) {
  const cookieHelper = await createCookieHelper();
  cookieHelper.set(name, value, options);
}
async function saveVerifierAndState() {
  const codeVerifier = (0, import_oauth4webapi.generateRandomCodeVerifier)();
  const codeChallenge = await (0, import_oauth4webapi.calculatePKCECodeChallenge)(codeVerifier);
  const state = (0, import_oauth4webapi.generateRandomState)();
  await setCookie("stack-oauth-outer-" + state, codeVerifier, { maxAge: 60 * 60 });
  return {
    codeChallenge,
    state
  };
}
function consumeVerifierAndStateCookie(state) {
  ensureClient();
  const cookieName = "stack-oauth-outer-" + state;
  const codeVerifier = getCookieClient(cookieName);
  if (!codeVerifier) {
    return null;
  }
  deleteCookieClient(cookieName);
  return {
    codeVerifier
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  consumeVerifierAndStateCookie,
  createBrowserCookieHelper,
  createCookieHelper,
  createPlaceholderCookieHelper,
  deleteCookie,
  deleteCookieClient,
  getCookie,
  getCookieClient,
  saveVerifierAndState,
  setCookie,
  setCookieClient,
  setOrDeleteCookie,
  setOrDeleteCookieClient
});
//# sourceMappingURL=cookie.js.map