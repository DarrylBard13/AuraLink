{"version":3,"sources":["../../../../src/lib/stack-app/customers/index.ts"],"sourcesContent":["\n//===========================================\n// THIS FILE IS AUTO-GENERATED FROM TEMPLATE. DO NOT EDIT IT DIRECTLY\n//===========================================\nimport { inlineOfferSchema } from \"@stackframe/stack-shared/dist/schema-fields\";\nimport * as yup from \"yup\";\nimport { AsyncStoreProperty } from \"../common\";\n\nexport type InlineOffer = yup.InferType<typeof inlineOfferSchema>;\n\nexport type Item = {\n  displayName: string,\n  /**\n   * May be negative.\n   */\n  quantity: number,\n  /**\n   * Equal to Math.max(0, quantity).\n   */\n  nonNegativeQuantity: number,\n};\n\nexport type ServerItem = Item & {\n  increaseQuantity(amount: number): Promise<void>,\n  /**\n   * Decreases the quantity by the given amount.\n   *\n   * Note that you may want to use tryDecreaseQuantity instead, as it will prevent the quantity from going below 0 in a race-condition-free way.\n   */\n  decreaseQuantity(amount: number): Promise<void>,\n  /**\n   * Decreases the quantity by the given amount and returns true if the result is non-negative; returns false and does nothing if the result would be negative.\n   *\n   * Most useful for pre-paid credits.\n   */\n  tryDecreaseQuantity(amount: number): Promise<boolean>,\n};\n\nexport type Customer<IsServer extends boolean = false> =\n  & {\n    readonly id: string,\n\n    createCheckoutUrl(options: (\n      | { offerId: string }\n      | (IsServer extends true ? { offer: InlineOffer } : never)\n    )): Promise<string>,\n  }\n  & AsyncStoreProperty<\n    \"item\",\n    [itemId: string],\n    IsServer extends true ? ServerItem : Item,\n    false\n  >;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}