"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lib/stack-app/apps/implementations/admin-app-impl.ts
var admin_app_impl_exports = {};
__export(admin_app_impl_exports, {
  _StackAdminAppImplIncomplete: () => _StackAdminAppImplIncomplete
});
module.exports = __toCommonJS(admin_app_impl_exports);
var import_stack_shared = require("@stackframe/stack-shared");
var import_production_mode = require("@stackframe/stack-shared/dist/helpers/production-mode");
var import_errors = require("@stackframe/stack-shared/dist/utils/errors");
var import_objects = require("@stackframe/stack-shared/dist/utils/objects");
var import_results = require("@stackframe/stack-shared/dist/utils/results");
var import_react = require("react");
var import_common = require("../../common.js");
var import_internal_api_keys = require("../../internal-api-keys/index.js");
var import_permissions = require("../../permissions/index.js");
var import_projects = require("../../projects/index.js");
var import_common2 = require("./common.js");
var import_server_app_impl = require("./server-app-impl.js");
var import_common3 = require("./common.js");
var _StackAdminAppImplIncomplete = class extends import_server_app_impl._StackServerAppImplIncomplete {
  constructor(options) {
    super({
      interface: new import_stack_shared.StackAdminInterface({
        getBaseUrl: () => (0, import_common2.getBaseUrl)(options.baseUrl),
        projectId: options.projectId ?? (0, import_common2.getDefaultProjectId)(),
        extraRequestHeaders: options.extraRequestHeaders ?? (0, import_common2.getDefaultExtraRequestHeaders)(),
        clientVersion: import_common2.clientVersion,
        ..."projectOwnerSession" in options ? {
          projectOwnerSession: options.projectOwnerSession
        } : {
          publishableClientKey: options.publishableClientKey ?? (0, import_common2.getDefaultPublishableClientKey)(),
          secretServerKey: options.secretServerKey ?? (0, import_common2.getDefaultSecretServerKey)(),
          superSecretAdminKey: options.superSecretAdminKey ?? (0, import_common2.getDefaultSuperSecretAdminKey)()
        }
      }),
      baseUrl: options.baseUrl,
      extraRequestHeaders: options.extraRequestHeaders,
      projectId: options.projectId,
      tokenStore: options.tokenStore,
      urls: options.urls,
      oauthScopesOnSignIn: options.oauthScopesOnSignIn,
      redirectMethod: options.redirectMethod
    });
    this._adminProjectCache = (0, import_common2.createCache)(async () => {
      return await this._interface.getProject();
    });
    this._internalApiKeysCache = (0, import_common2.createCache)(async () => {
      const res = await this._interface.listInternalApiKeys();
      return res;
    });
    this._adminEmailThemeCache = (0, import_common2.createCache)(async ([id]) => {
      return await this._interface.getEmailTheme(id);
    });
    this._adminEmailThemesCache = (0, import_common2.createCache)(async () => {
      return await this._interface.listEmailThemes();
    });
    this._adminEmailTemplatesCache = (0, import_common2.createCache)(async () => {
      return await this._interface.listInternalEmailTemplates();
    });
    this._adminEmailDraftsCache = (0, import_common2.createCache)(async () => {
      return await this._interface.listInternalEmailDrafts();
    });
    this._adminTeamPermissionDefinitionsCache = (0, import_common2.createCache)(async () => {
      return await this._interface.listTeamPermissionDefinitions();
    });
    this._adminProjectPermissionDefinitionsCache = (0, import_common2.createCache)(async () => {
      return await this._interface.listProjectPermissionDefinitions();
    });
    this._svixTokenCache = (0, import_common2.createCache)(async () => {
      return await this._interface.getSvixToken();
    });
    this._metricsCache = (0, import_common2.createCache)(async ([includeAnonymous]) => {
      return await this._interface.getMetrics(includeAnonymous);
    });
    this._emailPreviewCache = (0, import_common2.createCache)(async ([themeId, themeTsxSource, templateId, templateTsxSource]) => {
      return await this._interface.renderEmailPreview({ themeId, themeTsxSource, templateId, templateTsxSource });
    });
    this._configOverridesCache = (0, import_common2.createCache)(async () => {
      return await this._interface.getConfig();
    });
    this._stripeAccountInfoCache = (0, import_common2.createCache)(async () => {
      try {
        return await this._interface.getStripeAccountInfo();
      } catch (error) {
        if (error?.status === 404) {
          return null;
        }
        throw error;
      }
    });
    this._transactionsCache = (0, import_common2.createCache)(async ([cursor, limit, type, customerType]) => {
      return await this._interface.listTransactions({ cursor, limit, type, customerType });
    });
  }
  _adminConfigFromCrud(data) {
    return JSON.parse(data.config_string);
  }
  _adminOwnedProjectFromCrud(data, onRefresh) {
    if (this._tokenStoreInit !== null) {
      throw new import_errors.StackAssertionError("Owned apps must always have tokenStore === null \u2014 did you not create this project with app._createOwnedApp()?");
    }
    return {
      ...this._adminProjectFromCrud(data, onRefresh),
      app: this
    };
  }
  _adminProjectFromCrud(data, onRefresh) {
    if (data.id !== this.projectId) {
      throw new import_errors.StackAssertionError(`The project ID of the provided project JSON (${data.id}) does not match the project ID of the app (${this.projectId})!`);
    }
    const app = this;
    return {
      id: data.id,
      displayName: data.display_name,
      description: data.description,
      createdAt: new Date(data.created_at_millis),
      isProductionMode: data.is_production_mode,
      ownerTeamId: data.owner_team_id,
      logoUrl: data.logo_url,
      fullLogoUrl: data.full_logo_url,
      config: {
        signUpEnabled: data.config.sign_up_enabled,
        credentialEnabled: data.config.credential_enabled,
        magicLinkEnabled: data.config.magic_link_enabled,
        passkeyEnabled: data.config.passkey_enabled,
        clientTeamCreationEnabled: data.config.client_team_creation_enabled,
        clientUserDeletionEnabled: data.config.client_user_deletion_enabled,
        allowLocalhost: data.config.allow_localhost,
        oauthAccountMergeStrategy: data.config.oauth_account_merge_strategy,
        allowUserApiKeys: data.config.allow_user_api_keys,
        allowTeamApiKeys: data.config.allow_team_api_keys,
        oauthProviders: data.config.oauth_providers.map((p) => p.type === "shared" ? {
          id: p.id,
          type: "shared"
        } : {
          id: p.id,
          type: "standard",
          clientId: p.client_id ?? (0, import_errors.throwErr)("Client ID is missing"),
          clientSecret: p.client_secret ?? (0, import_errors.throwErr)("Client secret is missing"),
          facebookConfigId: p.facebook_config_id,
          microsoftTenantId: p.microsoft_tenant_id
        }),
        emailConfig: data.config.email_config.type === "shared" ? {
          type: "shared"
        } : {
          type: "standard",
          host: data.config.email_config.host ?? (0, import_errors.throwErr)("Email host is missing"),
          port: data.config.email_config.port ?? (0, import_errors.throwErr)("Email port is missing"),
          username: data.config.email_config.username ?? (0, import_errors.throwErr)("Email username is missing"),
          password: data.config.email_config.password ?? (0, import_errors.throwErr)("Email password is missing"),
          senderName: data.config.email_config.sender_name ?? (0, import_errors.throwErr)("Email sender name is missing"),
          senderEmail: data.config.email_config.sender_email ?? (0, import_errors.throwErr)("Email sender email is missing")
        },
        emailTheme: data.config.email_theme,
        domains: data.config.domains.map((d) => ({
          domain: d.domain,
          handlerPath: d.handler_path
        })),
        createTeamOnSignUp: data.config.create_team_on_sign_up,
        teamCreatorDefaultPermissions: data.config.team_creator_default_permissions,
        teamMemberDefaultPermissions: data.config.team_member_default_permissions,
        userDefaultPermissions: data.config.user_default_permissions
      },
      async getConfig() {
        return app._adminConfigFromCrud(await app._interface.getConfig());
      },
      useConfig() {
        const config = (0, import_common3.useAsyncCache)(app._configOverridesCache, [], "useConfig()");
        return (0, import_react.useMemo)(() => app._adminConfigFromCrud(config), [config]);
      },
      async updateConfig(configOverride) {
        await app._interface.updateConfig({ configOverride });
        await app._configOverridesCache.refresh([]);
      },
      async update(update) {
        const updateOptions = (0, import_projects.adminProjectUpdateOptionsToCrud)(update);
        await app._interface.updateProject(updateOptions);
        await onRefresh();
      },
      async delete() {
        await app._interface.deleteProject();
      },
      async transfer(user, newTeamId) {
        await app._interface.transferProject(user._internalSession, newTeamId);
        await onRefresh();
      },
      async getProductionModeErrors() {
        return (0, import_production_mode.getProductionModeErrors)(data);
      },
      useProductionModeErrors() {
        return (0, import_production_mode.getProductionModeErrors)(data);
      }
    };
  }
  _adminEmailTemplateFromCrud(data) {
    return {
      type: data.type,
      subject: data.subject,
      content: data.content,
      isDefault: data.is_default
    };
  }
  async getProject() {
    return this._adminProjectFromCrud(
      import_results.Result.orThrow(await this._adminProjectCache.getOrWait([], "write-only")),
      () => this._refreshProject()
    );
  }
  useProject() {
    const crud = (0, import_common3.useAsyncCache)(this._adminProjectCache, [], "useProjectAdmin()");
    return (0, import_react.useMemo)(() => this._adminProjectFromCrud(
      crud,
      () => this._refreshProject()
    ), [crud]);
  }
  _createInternalApiKeyBaseFromCrud(data) {
    const app = this;
    return {
      id: data.id,
      description: data.description,
      expiresAt: new Date(data.expires_at_millis),
      manuallyRevokedAt: data.manually_revoked_at_millis ? new Date(data.manually_revoked_at_millis) : null,
      createdAt: new Date(data.created_at_millis),
      isValid() {
        return this.whyInvalid() === null;
      },
      whyInvalid() {
        if (this.expiresAt.getTime() < Date.now()) return "expired";
        if (this.manuallyRevokedAt) return "manually-revoked";
        return null;
      },
      async revoke() {
        const res = await app._interface.revokeInternalApiKeyById(data.id);
        await app._refreshInternalApiKeys();
        return res;
      }
    };
  }
  _createInternalApiKeyFromCrud(data) {
    return {
      ...this._createInternalApiKeyBaseFromCrud(data),
      publishableClientKey: data.publishable_client_key ? { lastFour: data.publishable_client_key.last_four } : null,
      secretServerKey: data.secret_server_key ? { lastFour: data.secret_server_key.last_four } : null,
      superSecretAdminKey: data.super_secret_admin_key ? { lastFour: data.super_secret_admin_key.last_four } : null
    };
  }
  _createInternalApiKeyFirstViewFromCrud(data) {
    return {
      ...this._createInternalApiKeyBaseFromCrud(data),
      publishableClientKey: data.publishable_client_key,
      secretServerKey: data.secret_server_key,
      superSecretAdminKey: data.super_secret_admin_key
    };
  }
  async listInternalApiKeys() {
    const crud = import_results.Result.orThrow(await this._internalApiKeysCache.getOrWait([], "write-only"));
    return crud.map((j) => this._createInternalApiKeyFromCrud(j));
  }
  useInternalApiKeys() {
    const crud = (0, import_common3.useAsyncCache)(this._internalApiKeysCache, [], "useInternalApiKeys()");
    return (0, import_react.useMemo)(() => {
      return crud.map((j) => this._createInternalApiKeyFromCrud(j));
    }, [crud]);
  }
  async createInternalApiKey(options) {
    const crud = await this._interface.createInternalApiKey((0, import_internal_api_keys.internalApiKeyCreateOptionsToCrud)(options));
    await this._refreshInternalApiKeys();
    return this._createInternalApiKeyFirstViewFromCrud(crud);
  }
  useEmailThemes() {
    const crud = (0, import_common3.useAsyncCache)(this._adminEmailThemesCache, [], "useEmailThemes()");
    return (0, import_react.useMemo)(() => {
      return crud.map((theme) => ({
        id: theme.id,
        displayName: theme.display_name
      }));
    }, [crud]);
  }
  useEmailTemplates() {
    const crud = (0, import_common3.useAsyncCache)(this._adminEmailTemplatesCache, [], "useEmailTemplates()");
    return (0, import_react.useMemo)(() => {
      return crud.map((template) => ({
        id: template.id,
        displayName: template.display_name,
        themeId: template.theme_id,
        tsxSource: template.tsx_source
      }));
    }, [crud]);
  }
  useEmailDrafts() {
    const crud = (0, import_common3.useAsyncCache)(this._adminEmailDraftsCache, [], "useEmailDrafts()");
    return (0, import_react.useMemo)(() => {
      return crud.map((draft) => ({
        id: draft.id,
        displayName: draft.display_name,
        themeId: draft.theme_id,
        tsxSource: draft.tsx_source,
        sentAt: draft.sent_at_millis ? new Date(draft.sent_at_millis) : null
      }));
    }, [crud]);
  }
  async listEmailThemes() {
    const crud = import_results.Result.orThrow(await this._adminEmailThemesCache.getOrWait([], "write-only"));
    return crud.map((theme) => ({
      id: theme.id,
      displayName: theme.display_name
    }));
  }
  async listEmailTemplates() {
    const crud = import_results.Result.orThrow(await this._adminEmailTemplatesCache.getOrWait([], "write-only"));
    return crud.map((template) => ({
      id: template.id,
      displayName: template.display_name,
      themeId: template.theme_id,
      tsxSource: template.tsx_source
    }));
  }
  async listEmailDrafts() {
    const crud = import_results.Result.orThrow(await this._adminEmailDraftsCache.getOrWait([], "write-only"));
    return crud.map((draft) => ({
      id: draft.id,
      displayName: draft.display_name,
      themeId: draft.theme_id,
      tsxSource: draft.tsx_source,
      sentAt: draft.sent_at_millis ? new Date(draft.sent_at_millis) : null
    }));
  }
  async createTeamPermissionDefinition(data) {
    const crud = await this._interface.createTeamPermissionDefinition((0, import_permissions.adminTeamPermissionDefinitionCreateOptionsToCrud)(data));
    await this._adminTeamPermissionDefinitionsCache.refresh([]);
    return this._serverTeamPermissionDefinitionFromCrud(crud);
  }
  async updateTeamPermissionDefinition(permissionId, data) {
    await this._interface.updateTeamPermissionDefinition(permissionId, (0, import_permissions.adminTeamPermissionDefinitionUpdateOptionsToCrud)(data));
    await this._adminTeamPermissionDefinitionsCache.refresh([]);
  }
  async deleteTeamPermissionDefinition(permissionId) {
    await this._interface.deleteTeamPermissionDefinition(permissionId);
    await this._adminTeamPermissionDefinitionsCache.refresh([]);
  }
  async listTeamPermissionDefinitions() {
    const crud = import_results.Result.orThrow(await this._adminTeamPermissionDefinitionsCache.getOrWait([], "write-only"));
    return crud.map((p) => this._serverTeamPermissionDefinitionFromCrud(p));
  }
  useTeamPermissionDefinitions() {
    const crud = (0, import_common3.useAsyncCache)(this._adminTeamPermissionDefinitionsCache, [], "usePermissions()");
    return (0, import_react.useMemo)(() => {
      return crud.map((p) => this._serverTeamPermissionDefinitionFromCrud(p));
    }, [crud]);
  }
  async createProjectPermissionDefinition(data) {
    const crud = await this._interface.createProjectPermissionDefinition((0, import_permissions.adminProjectPermissionDefinitionCreateOptionsToCrud)(data));
    await this._adminProjectPermissionDefinitionsCache.refresh([]);
    return this._serverProjectPermissionDefinitionFromCrud(crud);
  }
  async updateProjectPermissionDefinition(permissionId, data) {
    await this._interface.updateProjectPermissionDefinition(permissionId, (0, import_permissions.adminProjectPermissionDefinitionUpdateOptionsToCrud)(data));
    await this._adminProjectPermissionDefinitionsCache.refresh([]);
  }
  async deleteProjectPermissionDefinition(permissionId) {
    await this._interface.deleteProjectPermissionDefinition(permissionId);
    await this._adminProjectPermissionDefinitionsCache.refresh([]);
  }
  async listProjectPermissionDefinitions() {
    const crud = import_results.Result.orThrow(await this._adminProjectPermissionDefinitionsCache.getOrWait([], "write-only"));
    return crud.map((p) => this._serverProjectPermissionDefinitionFromCrud(p));
  }
  useProjectPermissionDefinitions() {
    const crud = (0, import_common3.useAsyncCache)(this._adminProjectPermissionDefinitionsCache, [], "useProjectPermissions()");
    return (0, import_react.useMemo)(() => {
      return crud.map((p) => this._serverProjectPermissionDefinitionFromCrud(p));
    }, [crud]);
  }
  useSvixToken() {
    const crud = (0, import_common3.useAsyncCache)(this._svixTokenCache, [], "useSvixToken()");
    return crud.token;
  }
  async _refreshProject() {
    await Promise.all([
      super._refreshProject(),
      this._adminProjectCache.refresh([])
    ]);
  }
  async _refreshInternalApiKeys() {
    await this._internalApiKeysCache.refresh([]);
  }
  get [import_common.stackAppInternalsSymbol]() {
    return {
      ...super[import_common.stackAppInternalsSymbol],
      useMetrics: (includeAnonymous = false) => {
        return (0, import_common3.useAsyncCache)(this._metricsCache, [includeAnonymous], "useMetrics()");
      }
    };
  }
  async sendTestEmail(options) {
    const response = await this._interface.sendTestEmail({
      recipient_email: options.recipientEmail,
      email_config: {
        ...(0, import_objects.pick)(options.emailConfig, ["host", "port", "username", "password"]),
        sender_email: options.emailConfig.senderEmail,
        sender_name: options.emailConfig.senderName
      }
    });
    if (response.success) {
      return import_results.Result.ok(void 0);
    } else {
      return import_results.Result.error({ errorMessage: response.error_message ?? (0, import_errors.throwErr)("Email test error not specified") });
    }
  }
  async listSentEmails() {
    const response = await this._interface.listSentEmails();
    return response.items.map((email) => ({
      id: email.id,
      to: email.to ?? [],
      subject: email.subject,
      recipient: email.to?.[0] ?? "",
      sentAt: new Date(email.sent_at_millis),
      error: email.error
    }));
  }
  async sendSignInInvitationEmail(email, callbackUrl) {
    await this._interface.sendSignInInvitationEmail(email, callbackUrl);
  }
  async createEmailTemplate(displayName) {
    const result = await this._interface.createEmailTemplate(displayName);
    await this._adminEmailTemplatesCache.refresh([]);
    return result;
  }
  async createEmailDraft(options) {
    const result = await this._interface.createEmailDraft({
      display_name: options.displayName,
      theme_id: options.themeId,
      tsx_source: options.tsxSource
    });
    await this._adminEmailDraftsCache.refresh([]);
    return result;
  }
  async updateEmailDraft(id, data) {
    await this._interface.updateEmailDraft(id, {
      display_name: data.displayName,
      theme_id: data.themeId,
      tsx_source: data.tsxSource
    });
    await this._adminEmailDraftsCache.refresh([]);
  }
  async sendChatMessage(threadId, contextType, messages, abortSignal) {
    return await this._interface.sendChatMessage(threadId, contextType, messages, abortSignal);
  }
  async saveChatMessage(threadId, message) {
    await this._interface.saveChatMessage(threadId, message);
  }
  async listChatMessages(threadId) {
    return await this._interface.listChatMessages(threadId);
  }
  async createEmailTheme(displayName) {
    const result = await this._interface.createEmailTheme(displayName);
    await this._adminEmailThemesCache.refresh([]);
    return result;
  }
  async getEmailPreview(options) {
    return (await this._interface.renderEmailPreview(options)).html;
  }
  useEmailPreview(options) {
    const crud = (0, import_common3.useAsyncCache)(this._emailPreviewCache, [options.themeId, options.themeTsxSource, options.templateId, options.templateTsxSource], "useEmailPreview()");
    return crud.html;
  }
  useEmailTheme(id) {
    const crud = (0, import_common3.useAsyncCache)(this._adminEmailThemeCache, [id], "useEmailTheme()");
    return {
      displayName: crud.display_name,
      tsxSource: crud.tsx_source
    };
  }
  async updateEmailTheme(id, tsxSource) {
    await this._interface.updateEmailTheme(id, tsxSource);
  }
  async updateEmailTemplate(id, tsxSource, themeId) {
    const result = await this._interface.updateEmailTemplate(id, tsxSource, themeId);
    await this._adminEmailTemplatesCache.refresh([]);
    return { renderedHtml: result.rendered_html };
  }
  async setupPayments() {
    return await this._interface.setupPayments();
  }
  async createStripeWidgetAccountSession() {
    return await this._interface.createStripeWidgetAccountSession();
  }
  async createItemQuantityChange(options) {
    await this._interface.updateItemQuantity(
      { itemId: options.itemId, ..."userId" in options ? { userId: options.userId } : "teamId" in options ? { teamId: options.teamId } : { customCustomerId: options.customCustomerId } },
      {
        delta: options.quantity,
        expires_at: options.expiresAt,
        description: options.description
      }
    );
  }
  async testModePurchase(options) {
    await this._interface.testModePurchase({ price_id: options.priceId, full_code: options.fullCode, quantity: options.quantity });
  }
  async listTransactions(params) {
    const crud = import_results.Result.orThrow(await this._transactionsCache.getOrWait([params.cursor, params.limit, params.type, params.customerType], "write-only"));
    return crud;
  }
  useTransactions(params) {
    const data = (0, import_common3.useAsyncCache)(this._transactionsCache, [params.cursor, params.limit, params.type, params.customerType], "useTransactions()");
    return data;
  }
  async getStripeAccountInfo() {
    return await this._interface.getStripeAccountInfo();
  }
  useStripeAccountInfo() {
    const data = (0, import_common3.useAsyncCache)(this._stripeAccountInfoCache, [], "useStripeAccountInfo()");
    return data;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  _StackAdminAppImplIncomplete
});
//# sourceMappingURL=admin-app-impl.js.map