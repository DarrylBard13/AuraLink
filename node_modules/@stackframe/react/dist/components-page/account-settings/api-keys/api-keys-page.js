"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components-page/account-settings/api-keys/api-keys-page.tsx
var api_keys_page_exports = {};
__export(api_keys_page_exports, {
  ApiKeysPage: () => ApiKeysPage
});
module.exports = __toCommonJS(api_keys_page_exports);
var import_stack_ui = require("@stackframe/stack-ui");
var import_react = require("react");
var import_api_key_dialogs = require("../../../components/api-key-dialogs.js");
var import_api_key_table = require("../../../components/api-key-table.js");
var import_hooks = require("../../../lib/hooks.js");
var import_translations = require("../../../lib/translations.js");
var import_page_layout = require("../page-layout.js");
var import_jsx_runtime = require("react/jsx-runtime");
function ApiKeysPage(props) {
  const { t } = (0, import_translations.useTranslation)();
  const isInMockMode = !!(props?.mockApiKeys || props?.mockMode);
  const userFromHook = (0, import_hooks.useUser)({ or: isInMockMode ? "return-null" : "redirect" });
  if (isInMockMode && !userFromHook) {
  }
  if (!isInMockMode && !userFromHook) {
    return null;
  }
  const mockApiKeysData = props?.mockApiKeys ? props.mockApiKeys.map((mockKey) => ({
    id: mockKey.id,
    description: mockKey.description,
    createdAt: new Date(mockKey.createdAt),
    expiresAt: mockKey.expiresAt ? new Date(mockKey.expiresAt) : void 0,
    manuallyRevokedAt: mockKey.manuallyRevokedAt ? new Date(mockKey.manuallyRevokedAt) : null,
    value: {
      lastFour: mockKey.id.slice(-4).padStart(4, "0")
      // Use last 4 chars of ID or pad with zeros
    },
    type: "user",
    userId: "mock-user-id",
    update: async () => {
      console.log("Mock API key update called");
    },
    revoke: async () => {
      console.log("Mock API key revoke called");
    },
    isValid: () => {
      const now = /* @__PURE__ */ new Date();
      const isExpired = mockKey.expiresAt ? new Date(mockKey.expiresAt) < now : false;
      const isRevoked = !!mockKey.manuallyRevokedAt;
      return !isExpired && !isRevoked;
    },
    whyInvalid: () => {
      const now = /* @__PURE__ */ new Date();
      if (mockKey.manuallyRevokedAt) return "manually-revoked";
      if (mockKey.expiresAt && new Date(mockKey.expiresAt) < now) return "expired";
      return null;
    }
  })) : [
    {
      id: "key-1",
      description: "Development Key",
      createdAt: new Date(Date.now() - 1728e5),
      // 2 days ago
      expiresAt: void 0,
      manuallyRevokedAt: null,
      value: {
        lastFour: "ey-1".slice(-4).padStart(4, "0")
      },
      type: "user",
      userId: "mock-user-id",
      update: async () => {
        console.log("Mock API key update called");
      },
      revoke: async () => {
        console.log("Mock API key revoke called");
      },
      isValid: () => true,
      whyInvalid: () => null
    }
  ];
  let apiKeys;
  if (isInMockMode) {
    apiKeys = mockApiKeysData;
  } else if (userFromHook) {
    apiKeys = userFromHook.useApiKeys();
  } else {
    apiKeys = [];
  }
  const [isNewApiKeyDialogOpen, setIsNewApiKeyDialogOpen] = (0, import_react.useState)(false);
  const [returnedApiKey, setReturnedApiKey] = (0, import_react.useState)(null);
  const CreateDialog = import_api_key_dialogs.CreateApiKeyDialog;
  const ShowDialog = import_api_key_dialogs.ShowApiKeyDialog;
  const handleCreateApiKey = async (data) => {
    if (isInMockMode) {
      const mockApiKey = {
        id: `key-${Date.now()}`,
        description: data.description,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        expiresAt: data.expiresAt?.toISOString(),
        value: "sk_dev_mock_key_" + Math.random().toString(36).substring(2),
        update: async () => {
          console.log("Mock API key update called");
        },
        revoke: async () => {
          console.log("Mock API key revoke called");
        },
        isValid: () => true,
        whyInvalid: () => null,
        type: "user",
        userId: "mock-user-id"
      };
      return mockApiKey;
    }
    if (!userFromHook) throw new Error("User not available");
    return await userFromHook.createApiKey(data);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_page_layout.PageLayout, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_stack_ui.Button, { onClick: () => setIsNewApiKeyDialogOpen(true), children: t("Create API Key") }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_api_key_table.ApiKeyTable, { apiKeys }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      CreateDialog,
      {
        open: isNewApiKeyDialogOpen,
        onOpenChange: setIsNewApiKeyDialogOpen,
        onKeyCreated: setReturnedApiKey,
        createApiKey: handleCreateApiKey,
        mockMode: isInMockMode
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      ShowDialog,
      {
        apiKey: returnedApiKey,
        onClose: () => setReturnedApiKey(null)
      }
    )
  ] });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiKeysPage
});
//# sourceMappingURL=api-keys-page.js.map