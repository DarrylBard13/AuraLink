{"version":3,"sources":["../../../../src/components-page/account-settings/api-keys/api-keys-page.tsx"],"sourcesContent":["\n//===========================================\n// THIS FILE IS AUTO-GENERATED FROM TEMPLATE. DO NOT EDIT IT DIRECTLY\n//===========================================\nimport { Button } from \"@stackframe/stack-ui\";\nimport { useState } from \"react\";\nimport { CreateApiKeyDialog, ShowApiKeyDialog } from \"../../../components/api-key-dialogs\";\nimport { ApiKeyTable } from \"../../../components/api-key-table\";\nimport { useUser } from \"../../../lib/hooks\";\nimport { ApiKey, ApiKeyCreationOptions } from \"../../../lib/stack-app/api-keys\";\nimport { useTranslation } from \"../../../lib/translations\";\nimport { PageLayout } from \"../page-layout\";\n\n\nexport function ApiKeysPage(props?: {\n  mockApiKeys?: Array<{\n    id: string,\n    description: string,\n    createdAt: string,\n    expiresAt?: string,\n    manuallyRevokedAt?: string,\n  }>,\n  mockMode?: boolean,\n}) {\n  const { t } = useTranslation();\n\n  // Check if we're in any kind of mock mode first\n  const isInMockMode = !!(props?.mockApiKeys || props?.mockMode);\n\n  const userFromHook = useUser({ or: isInMockMode ? 'return-null' : 'redirect' });\n\n  // In mock mode, we don't need a user - just show mock data\n  if (isInMockMode && !userFromHook) {\n    // This is expected in mock mode, continue with mock data\n  }\n\n  // Only return null if we're not in mock mode and don't have a user\n  if (!isInMockMode && !userFromHook) {\n    return null; // This shouldn't happen due to redirect, but just in case\n  }\n\n  // Use mock data if provided\n  const mockApiKeysData = props?.mockApiKeys ? props.mockApiKeys.map(mockKey => ({\n    id: mockKey.id,\n    description: mockKey.description,\n    createdAt: new Date(mockKey.createdAt),\n    expiresAt: mockKey.expiresAt ? new Date(mockKey.expiresAt) : undefined,\n    manuallyRevokedAt: mockKey.manuallyRevokedAt ? new Date(mockKey.manuallyRevokedAt) : null,\n    value: {\n      lastFour: mockKey.id.slice(-4).padStart(4, '0'), // Use last 4 chars of ID or pad with zeros\n    },\n    type: 'user' as const,\n    userId: 'mock-user-id',\n    update: async () => {\n      console.log('Mock API key update called');\n    },\n    revoke: async () => {\n      console.log('Mock API key revoke called');\n    },\n    isValid: () => {\n      const now = new Date();\n      const isExpired = mockKey.expiresAt ? new Date(mockKey.expiresAt) < now : false;\n      const isRevoked = !!mockKey.manuallyRevokedAt;\n      return !isExpired && !isRevoked;\n    },\n    whyInvalid: () => {\n      const now = new Date();\n      if (mockKey.manuallyRevokedAt) return 'manually-revoked';\n      if (mockKey.expiresAt && new Date(mockKey.expiresAt) < now) return 'expired';\n      return null;\n    },\n  })) : [\n    {\n      id: 'key-1',\n      description: 'Development Key',\n      createdAt: new Date(Date.now() - 172800000), // 2 days ago\n      expiresAt: undefined,\n      manuallyRevokedAt: null,\n      value: {\n        lastFour: 'ey-1'.slice(-4).padStart(4, '0'),\n      },\n      type: 'user' as const,\n      userId: 'mock-user-id',\n      update: async () => {\n        console.log('Mock API key update called');\n      },\n      revoke: async () => {\n        console.log('Mock API key revoke called');\n      },\n      isValid: () => true,\n      whyInvalid: () => null,\n    }\n  ];\n\n  // Determine which API keys to use\n  let apiKeys: any[];\n  if (isInMockMode) {\n    apiKeys = mockApiKeysData;\n  } else if (userFromHook) {\n    apiKeys = userFromHook.useApiKeys();\n  } else {\n    apiKeys = [];\n  }\n\n  const [isNewApiKeyDialogOpen, setIsNewApiKeyDialogOpen] = useState(false);\n  const [returnedApiKey, setReturnedApiKey] = useState<ApiKey<\"user\", true> | null>(null);\n\n  const CreateDialog = CreateApiKeyDialog<\"user\">;\n  const ShowDialog = ShowApiKeyDialog<\"user\">;\n\n  const handleCreateApiKey = async (data: ApiKeyCreationOptions<\"user\">) => {\n    if (isInMockMode) {\n      // Mock API key creation\n      const mockApiKey = {\n        id: `key-${Date.now()}`,\n        description: data.description,\n        createdAt: new Date().toISOString(),\n        expiresAt: data.expiresAt?.toISOString(),\n        value: 'sk_dev_mock_key_' + Math.random().toString(36).substring(2),\n        update: async () => {\n          console.log('Mock API key update called');\n        },\n        revoke: async () => {\n          console.log('Mock API key revoke called');\n        },\n        isValid: () => true,\n        whyInvalid: () => null,\n        type: 'user' as const,\n        userId: 'mock-user-id',\n      };\n      return mockApiKey as any;\n    }\n\n    if (!userFromHook) throw new Error('User not available');\n    return await userFromHook.createApiKey(data);\n  };\n\n  return (\n    <PageLayout>\n      <Button onClick={() => setIsNewApiKeyDialogOpen(true)}>\n        {t(\"Create API Key\")}\n      </Button>\n      <ApiKeyTable apiKeys={apiKeys} />\n      <CreateDialog\n        open={isNewApiKeyDialogOpen}\n        onOpenChange={setIsNewApiKeyDialogOpen}\n        onKeyCreated={setReturnedApiKey}\n        createApiKey={handleCreateApiKey}\n        mockMode={isInMockMode}\n      />\n      <ShowDialog\n        apiKey={returnedApiKey}\n        onClose={() => setReturnedApiKey(null)}\n      />\n    </PageLayout>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,sBAAuB;AACvB,mBAAyB;AACzB,6BAAqD;AACrD,2BAA4B;AAC5B,mBAAwB;AAExB,0BAA+B;AAC/B,yBAA2B;AA+HvB;AA5HG,SAAS,YAAY,OASzB;AACD,QAAM,EAAE,EAAE,QAAI,oCAAe;AAG7B,QAAM,eAAe,CAAC,EAAE,OAAO,eAAe,OAAO;AAErD,QAAM,mBAAe,sBAAQ,EAAE,IAAI,eAAe,gBAAgB,WAAW,CAAC;AAG9E,MAAI,gBAAgB,CAAC,cAAc;AAAA,EAEnC;AAGA,MAAI,CAAC,gBAAgB,CAAC,cAAc;AAClC,WAAO;AAAA,EACT;AAGA,QAAM,kBAAkB,OAAO,cAAc,MAAM,YAAY,IAAI,cAAY;AAAA,IAC7E,IAAI,QAAQ;AAAA,IACZ,aAAa,QAAQ;AAAA,IACrB,WAAW,IAAI,KAAK,QAAQ,SAAS;AAAA,IACrC,WAAW,QAAQ,YAAY,IAAI,KAAK,QAAQ,SAAS,IAAI;AAAA,IAC7D,mBAAmB,QAAQ,oBAAoB,IAAI,KAAK,QAAQ,iBAAiB,IAAI;AAAA,IACrF,OAAO;AAAA,MACL,UAAU,QAAQ,GAAG,MAAM,EAAE,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,IAChD;AAAA,IACA,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,QAAQ,YAAY;AAClB,cAAQ,IAAI,4BAA4B;AAAA,IAC1C;AAAA,IACA,QAAQ,YAAY;AAClB,cAAQ,IAAI,4BAA4B;AAAA,IAC1C;AAAA,IACA,SAAS,MAAM;AACb,YAAM,MAAM,oBAAI,KAAK;AACrB,YAAM,YAAY,QAAQ,YAAY,IAAI,KAAK,QAAQ,SAAS,IAAI,MAAM;AAC1E,YAAM,YAAY,CAAC,CAAC,QAAQ;AAC5B,aAAO,CAAC,aAAa,CAAC;AAAA,IACxB;AAAA,IACA,YAAY,MAAM;AAChB,YAAM,MAAM,oBAAI,KAAK;AACrB,UAAI,QAAQ,kBAAmB,QAAO;AACtC,UAAI,QAAQ,aAAa,IAAI,KAAK,QAAQ,SAAS,IAAI,IAAK,QAAO;AACnE,aAAO;AAAA,IACT;AAAA,EACF,EAAE,IAAI;AAAA,IACJ;AAAA,MACE,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,MAAS;AAAA;AAAA,MAC1C,WAAW;AAAA,MACX,mBAAmB;AAAA,MACnB,OAAO;AAAA,QACL,UAAU,OAAO,MAAM,EAAE,EAAE,SAAS,GAAG,GAAG;AAAA,MAC5C;AAAA,MACA,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ,YAAY;AAClB,gBAAQ,IAAI,4BAA4B;AAAA,MAC1C;AAAA,MACA,QAAQ,YAAY;AAClB,gBAAQ,IAAI,4BAA4B;AAAA,MAC1C;AAAA,MACA,SAAS,MAAM;AAAA,MACf,YAAY,MAAM;AAAA,IACpB;AAAA,EACF;AAGA,MAAI;AACJ,MAAI,cAAc;AAChB,cAAU;AAAA,EACZ,WAAW,cAAc;AACvB,cAAU,aAAa,WAAW;AAAA,EACpC,OAAO;AACL,cAAU,CAAC;AAAA,EACb;AAEA,QAAM,CAAC,uBAAuB,wBAAwB,QAAI,uBAAS,KAAK;AACxE,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,uBAAsC,IAAI;AAEtF,QAAM,eAAe;AACrB,QAAM,aAAa;AAEnB,QAAM,qBAAqB,OAAO,SAAwC;AACxE,QAAI,cAAc;AAEhB,YAAM,aAAa;AAAA,QACjB,IAAI,OAAO,KAAK,IAAI,CAAC;AAAA,QACrB,aAAa,KAAK;AAAA,QAClB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,QAClC,WAAW,KAAK,WAAW,YAAY;AAAA,QACvC,OAAO,qBAAqB,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC;AAAA,QAClE,QAAQ,YAAY;AAClB,kBAAQ,IAAI,4BAA4B;AAAA,QAC1C;AAAA,QACA,QAAQ,YAAY;AAClB,kBAAQ,IAAI,4BAA4B;AAAA,QAC1C;AAAA,QACA,SAAS,MAAM;AAAA,QACf,YAAY,MAAM;AAAA,QAClB,MAAM;AAAA,QACN,QAAQ;AAAA,MACV;AACA,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,aAAc,OAAM,IAAI,MAAM,oBAAoB;AACvD,WAAO,MAAM,aAAa,aAAa,IAAI;AAAA,EAC7C;AAEA,SACE,6CAAC,iCACC;AAAA,gDAAC,0BAAO,SAAS,MAAM,yBAAyB,IAAI,GACjD,YAAE,gBAAgB,GACrB;AAAA,IACA,4CAAC,oCAAY,SAAkB;AAAA,IAC/B;AAAA,MAAC;AAAA;AAAA,QACC,MAAM;AAAA,QACN,cAAc;AAAA,QACd,cAAc;AAAA,QACd,cAAc;AAAA,QACd,UAAU;AAAA;AAAA,IACZ;AAAA,IACA;AAAA,MAAC;AAAA;AAAA,QACC,QAAQ;AAAA,QACR,SAAS,MAAM,kBAAkB,IAAI;AAAA;AAAA,IACvC;AAAA,KACF;AAEJ;","names":[]}