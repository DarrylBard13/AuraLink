"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/helpers/vault/client-side.ts
var client_side_exports = {};
__export(client_side_exports, {
  decryptValue: () => decryptValue,
  encryptValue: () => encryptValue,
  hashKey: () => hashKey
});
module.exports = __toCommonJS(client_side_exports);
var import_bytes = require("../../utils/bytes.js");
var import_crypto = require("../../utils/crypto.js");
var hashPurpose = "stack-data-vault-client-side-encryption-key-hash";
var encryptionSecretPurpose = "stack-data-vault-client-side-encryption-value-encryption-key-hash";
var encryptionValuePurpose = "stack-data-vault-client-side-encryption-value-encryption-value-encryption";
async function getDerivedKey(secret, key) {
  return await (0, import_crypto.iteratedHash)({
    purpose: encryptionSecretPurpose,
    extra: secret,
    value: key,
    iterations: 1e5
  });
}
async function hashKey(secret, key) {
  return (0, import_bytes.encodeBase64)(await (0, import_crypto.hash)({
    purpose: hashPurpose,
    extra: secret,
    value: await getDerivedKey(secret, key)
  }));
}
async function encryptValue(secret, key, value) {
  const valueEncryptionDerivedKey = await getDerivedKey(secret, key);
  const bytes = await (0, import_crypto.encrypt)({
    purpose: encryptionValuePurpose,
    secret: valueEncryptionDerivedKey,
    value: new TextEncoder().encode(value)
  });
  return (0, import_bytes.encodeBase64)(bytes);
}
async function decryptValue(secret, key, encryptedValue) {
  const valueEncryptionDerivedKey = await getDerivedKey(secret, key);
  const bytesResult = await (0, import_crypto.decrypt)({
    purpose: encryptionValuePurpose,
    secret: valueEncryptionDerivedKey,
    cipher: (0, import_bytes.decodeBase64)(encryptedValue)
  });
  if (bytesResult.status === "error") throw new Error("Data vault client-side decryption failed. Are you sure you're using the correct secret?", { cause: bytesResult.error });
  return new TextDecoder().decode(bytesResult.data);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decryptValue,
  encryptValue,
  hashKey
});
//# sourceMappingURL=client-side.js.map