declare function generateRandomValues(array: Uint8Array): typeof array;
/**
 * Generates a secure alphanumeric string using the system's cryptographically secure
 * random number generator.
 */
declare function generateSecureRandomString(minBitsOfEntropy?: number): string;
declare function encrypt({ purpose, secret, value }: {
    purpose: string;
    secret: string | Uint8Array;
    value: Uint8Array;
}): Promise<Uint8Array>;
declare function decrypt({ purpose, secret, cipher }: {
    purpose: string;
    secret: string | Uint8Array;
    cipher: Uint8Array;
}): Promise<({
    status: "ok";
    data: Uint8Array;
} & {
    status: "ok";
}) | ({
    status: "error";
    error: Error;
} & {
    status: "error";
})>;
type HashOptions = {
    purpose: string;
    salt?: string | Uint8Array;
    extra?: string | Uint8Array;
    value: string | Uint8Array;
};
declare function hash(options: HashOptions): Promise<Uint8Array>;
declare function iteratedHash(options: HashOptions & {
    iterations: number;
}): Promise<Uint8Array>;

export { type HashOptions, decrypt, encrypt, generateRandomValues, generateSecureRandomString, hash, iteratedHash };
