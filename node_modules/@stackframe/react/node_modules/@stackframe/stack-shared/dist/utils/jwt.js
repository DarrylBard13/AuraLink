"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/jwt.tsx
var jwt_exports = {};
__export(jwt_exports, {
  getJwtInfo: () => getJwtInfo,
  getPrivateJwks: () => getPrivateJwks,
  getPublicJwkSet: () => getPublicJwkSet,
  oldGetKid: () => oldGetKid,
  signJWT: () => signJWT,
  verifyJWT: () => verifyJWT
});
module.exports = __toCommonJS(jwt_exports);
var import_crypto = __toESM(require("crypto"));
var import_elliptic = __toESM(require("elliptic"));
var jose = __toESM(require("jose"));
var import_errors = require("jose/errors");
var import_bytes = require("./bytes.js");
var import_env = require("./env.js");
var import_errors2 = require("./errors.js");
var import_globals = require("./globals.js");
var import_objects = require("./objects.js");
var import_results = require("./results.js");
var import_strings = require("./strings.js");
function getStackServerSecret() {
  const STACK_SERVER_SECRET = (0, import_env.getEnvVariable)("STACK_SERVER_SECRET");
  try {
    jose.base64url.decode(STACK_SERVER_SECRET);
  } catch (e) {
    throw new import_errors2.StackAssertionError("STACK_SERVER_SECRET is not valid. Please use the generateKeys script to generate a new secret.", { cause: e });
  }
  return STACK_SERVER_SECRET;
}
async function getJwtInfo(options) {
  try {
    if (typeof options.jwt !== "string") return import_results.Result.error({ error: "JWT input is not a string!", stringifiedInput: (0, import_strings.nicify)(options.jwt) });
    if (!options.jwt.startsWith("ey")) return import_results.Result.error({ error: "Input is a string, but not a JWT!", input: options.jwt });
    const decodedJwt = jose.decodeJwt(options.jwt);
    return import_results.Result.ok({ payload: decodedJwt });
  } catch (e) {
    return import_results.Result.error({
      exception: (0, import_errors2.errorToNiceString)(e)
    });
  }
}
async function signJWT(options) {
  const privateJwks = await getPrivateJwks({ audience: options.audience });
  const privateKey = await jose.importJWK(privateJwks[0]);
  return await new jose.SignJWT(options.payload).setProtectedHeader({ alg: "ES256", kid: privateJwks[0].kid }).setIssuer(options.issuer).setIssuedAt().setAudience(options.audience).setExpirationTime(options.expirationTime || "5m").sign(privateKey);
}
async function verifyJWT(options) {
  const decodedJwt = jose.decodeJwt(options.jwt);
  const audience = decodedJwt.aud;
  if (!audience || typeof audience !== "string") {
    throw new import_errors.JOSEError("Invalid JWT audience");
  }
  const jwkSet = jose.createLocalJWKSet(await getPublicJwkSet(await getPrivateJwks({ audience })));
  const verified = await jose.jwtVerify(options.jwt, jwkSet, { issuer: options.allowedIssuers });
  return verified.payload;
}
async function getPrivateJwkFromDerivedSecret(derivedSecret, kid) {
  const secretHash = await import_globals.globalVar.crypto.subtle.digest("SHA-256", jose.base64url.decode(derivedSecret));
  const priv = new Uint8Array(secretHash);
  const ec = new import_elliptic.default.ec("p256");
  const key = ec.keyFromPrivate(priv);
  const publicKey = key.getPublic();
  return {
    kty: "EC",
    crv: "P-256",
    alg: "ES256",
    kid,
    d: (0, import_bytes.encodeBase64Url)(priv),
    x: (0, import_bytes.encodeBase64Url)(publicKey.getX().toBuffer()),
    y: (0, import_bytes.encodeBase64Url)(publicKey.getY().toBuffer())
  };
}
async function getPrivateJwks(options) {
  const getHashOfJwkInfo = (type) => jose.base64url.encode(
    import_crypto.default.createHash("sha256").update(JSON.stringify([type, getStackServerSecret(), {
      audience: options.audience
    }])).digest()
  );
  const perAudienceSecret = getHashOfJwkInfo("stack-jwk-audience-secret");
  const perAudienceKid = getHashOfJwkInfo("stack-jwk-kid").slice(0, 12);
  const oldPerAudienceSecret = oldGetPerAudienceSecret({ audience: options.audience });
  const oldPerAudienceKid = oldGetKid({ secret: oldPerAudienceSecret });
  return [
    // TODO next-release: make this not take precedence; then, in the release after that, remove it entirely
    await getPrivateJwkFromDerivedSecret(oldPerAudienceSecret, oldPerAudienceKid),
    await getPrivateJwkFromDerivedSecret(perAudienceSecret, perAudienceKid)
  ];
}
async function getPublicJwkSet(privateJwks) {
  return {
    keys: privateJwks.map((jwk) => (0, import_objects.pick)(jwk, ["kty", "alg", "crv", "x", "y", "kid"]))
  };
}
function oldGetPerAudienceSecret(options) {
  if (options.audience === "kid") {
    throw new import_errors2.StackAssertionError("You cannot use the 'kid' audience for a per-audience secret, see comment below in jwt.tsx");
  }
  return jose.base64url.encode(
    import_crypto.default.createHash("sha256").update(JSON.stringify([getStackServerSecret(), options.audience])).digest()
  );
}
function oldGetKid(options) {
  return jose.base64url.encode(
    import_crypto.default.createHash("sha256").update(JSON.stringify([options.secret, "kid"])).digest()
  ).slice(0, 12);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getJwtInfo,
  getPrivateJwks,
  getPublicJwkSet,
  oldGetKid,
  signJWT,
  verifyJWT
});
//# sourceMappingURL=jwt.js.map