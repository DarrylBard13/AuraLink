import * as jose from 'jose';

declare function getJwtInfo(options: {
    jwt: string;
}): Promise<({
    status: "error";
    error: {
        error: string;
        stringifiedInput: string;
    };
} & {
    status: "error";
}) | ({
    status: "error";
    error: {
        error: string;
        input: string;
    };
} & {
    status: "error";
}) | ({
    status: "ok";
    data: {
        payload: jose.JWTPayload;
    };
} & {
    status: "ok";
}) | ({
    status: "error";
    error: {
        exception: string;
    };
} & {
    status: "error";
})>;
declare function signJWT(options: {
    issuer: string;
    audience: string;
    payload: any;
    expirationTime?: string;
}): Promise<string>;
declare function verifyJWT(options: {
    allowedIssuers: string[];
    jwt: string;
}): Promise<jose.JWTPayload>;
type PrivateJwk = {
    kty: "EC";
    alg: "ES256";
    crv: "P-256";
    kid: string;
    d: string;
    x: string;
    y: string;
};
/**
 * Returns a list of valid private JWKs for the given audience, with the first one taking precedence when signing new
 * JWTs.
 */
declare function getPrivateJwks(options: {
    audience: string;
}): Promise<PrivateJwk[]>;
type PublicJwk = {
    kty: "EC";
    alg: "ES256";
    crv: "P-256";
    kid: string;
    x: string;
    y: string;
};
declare function getPublicJwkSet(privateJwks: PrivateJwk[]): Promise<{
    keys: PublicJwk[];
}>;
declare function oldGetKid(options: {
    secret: string;
}): string;

export { type PrivateJwk, type PublicJwk, getJwtInfo, getPrivateJwks, getPublicJwkSet, oldGetKid, signJWT, verifyJWT };
