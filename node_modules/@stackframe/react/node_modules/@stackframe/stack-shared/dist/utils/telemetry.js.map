{"version":3,"sources":["../../src/utils/telemetry.tsx"],"sourcesContent":["import { Attributes, AttributeValue, Span, trace } from \"@opentelemetry/api\";\nimport { getEnvVariable } from \"./env\";\nimport { StackAssertionError } from \"./errors\";\n\nconst tracer = trace.getTracer('stack-tracer');\n\nexport function withTraceSpan<P extends any[], T>(optionsOrDescription: string | { description: string, attributes?: Record<string, AttributeValue> }, fn: (...args: P) => Promise<T>): (...args: P) => Promise<T> {\n  return async (...args: P) => {\n    return await traceSpan(optionsOrDescription, (span) => fn(...args));\n  };\n}\n\nexport async function traceSpan<T>(optionsOrDescription: string | { description: string, attributes?: Record<string, AttributeValue> }, fn: (span: Span) => Promise<T>): Promise<T> {\n  let options = typeof optionsOrDescription === 'string' ? { description: optionsOrDescription } : optionsOrDescription;\n  return await tracer.startActiveSpan(`STACK: ${options.description}`, async (span) => {\n    if (options.attributes) {\n      for (const [key, value] of Object.entries(options.attributes)) {\n        span.setAttribute(key, value);\n      }\n    }\n    try {\n      return await fn(span);\n    } finally {\n      span.end();\n    }\n  });\n}\n\nexport function log(message: string, attributes: Attributes) {\n  const span = trace.getActiveSpan();\n  if (span) {\n    span.addEvent(message, attributes);\n    // Telemetry is not initialized while seeding, so we don't want to throw an error\n  } else if (getEnvVariable('STACK_SEED_MODE', 'false') !== 'true') {\n    throw new StackAssertionError('No active span found');\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAwD;AACxD,iBAA+B;AAC/B,oBAAoC;AAEpC,IAAM,SAAS,iBAAM,UAAU,cAAc;AAEtC,SAAS,cAAkC,sBAAqG,IAA4D;AACjN,SAAO,UAAU,SAAY;AAC3B,WAAO,MAAM,UAAU,sBAAsB,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC;AAAA,EACpE;AACF;AAEA,eAAsB,UAAa,sBAAqG,IAA4C;AAClL,MAAI,UAAU,OAAO,yBAAyB,WAAW,EAAE,aAAa,qBAAqB,IAAI;AACjG,SAAO,MAAM,OAAO,gBAAgB,UAAU,QAAQ,WAAW,IAAI,OAAO,SAAS;AACnF,QAAI,QAAQ,YAAY;AACtB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,UAAU,GAAG;AAC7D,aAAK,aAAa,KAAK,KAAK;AAAA,MAC9B;AAAA,IACF;AACA,QAAI;AACF,aAAO,MAAM,GAAG,IAAI;AAAA,IACtB,UAAE;AACA,WAAK,IAAI;AAAA,IACX;AAAA,EACF,CAAC;AACH;AAEO,SAAS,IAAI,SAAiB,YAAwB;AAC3D,QAAM,OAAO,iBAAM,cAAc;AACjC,MAAI,MAAM;AACR,SAAK,SAAS,SAAS,UAAU;AAAA,EAEnC,eAAW,2BAAe,mBAAmB,OAAO,MAAM,QAAQ;AAChE,UAAM,IAAI,kCAAoB,sBAAsB;AAAA,EACtD;AACF;","names":[]}