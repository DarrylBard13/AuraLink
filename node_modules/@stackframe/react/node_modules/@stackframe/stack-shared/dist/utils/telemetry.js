"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/telemetry.tsx
var telemetry_exports = {};
__export(telemetry_exports, {
  log: () => log,
  traceSpan: () => traceSpan,
  withTraceSpan: () => withTraceSpan
});
module.exports = __toCommonJS(telemetry_exports);
var import_api = require("@opentelemetry/api");
var import_env = require("./env.js");
var import_errors = require("./errors.js");
var tracer = import_api.trace.getTracer("stack-tracer");
function withTraceSpan(optionsOrDescription, fn) {
  return async (...args) => {
    return await traceSpan(optionsOrDescription, (span) => fn(...args));
  };
}
async function traceSpan(optionsOrDescription, fn) {
  let options = typeof optionsOrDescription === "string" ? { description: optionsOrDescription } : optionsOrDescription;
  return await tracer.startActiveSpan(`STACK: ${options.description}`, async (span) => {
    if (options.attributes) {
      for (const [key, value] of Object.entries(options.attributes)) {
        span.setAttribute(key, value);
      }
    }
    try {
      return await fn(span);
    } finally {
      span.end();
    }
  });
}
function log(message, attributes) {
  const span = import_api.trace.getActiveSpan();
  if (span) {
    span.addEvent(message, attributes);
  } else if ((0, import_env.getEnvVariable)("STACK_SEED_MODE", "false") !== "true") {
    throw new import_errors.StackAssertionError("No active span found");
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  log,
  traceSpan,
  withTraceSpan
});
//# sourceMappingURL=telemetry.js.map