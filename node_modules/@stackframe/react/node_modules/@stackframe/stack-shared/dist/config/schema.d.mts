import { DayInterval } from '../utils/dates.mjs';
import * as yup from 'yup';
import { DeepMerge } from '../utils/objects.mjs';
import { Result } from '../utils/results.mjs';
import { Expand, IsUnion, CollapseObjectUnion } from '../utils/types.mjs';
import { Config, NormalizesTo } from './format.mjs';
import '../utils/strings.mjs';

declare const configLevels: readonly ["project", "branch", "environment", "organization"];
type ConfigLevel = typeof configLevels[number];
declare module "yup" {
    interface CustomSchemaMetadata {
        stackConfigCanNoLongerBeOverridden?: true;
    }
}
/**
 * All fields that can be overridden at this level.
 */
declare const projectConfigSchema: yup.ObjectSchema<{
    sourceOfTruth: {
        type: "hosted";
    } | {
        type: "neon";
        connectionStrings: Record<string, string>;
    } | {
        type: "postgres";
        connectionString: string;
    };
}, yup.AnyObject, {
    sourceOfTruth: undefined;
}, "">;
declare const branchPaymentsSchema: yup.ObjectSchema<{
    autoPay: {
        interval?: DayInterval | undefined;
    } | undefined;
    groups: Record<string, {
        displayName?: string | undefined;
    }>;
    offers: Record<string, {
        displayName?: string | undefined;
        serverOnly?: boolean | undefined;
        freeTrial?: DayInterval | undefined;
        groupId?: string | undefined;
        isAddOnTo?: false | Record<string, true> | undefined;
        stackable?: boolean | undefined;
        customerType: "team" | "user" | "custom";
        prices: "include-by-default" | Record<string, {
            USD?: string | undefined;
            EUR?: string | undefined;
            GBP?: string | undefined;
            JPY?: string | undefined;
            INR?: string | undefined;
            AUD?: string | undefined;
            CAD?: string | undefined;
            interval?: DayInterval | undefined;
            serverOnly?: boolean | undefined;
            freeTrial?: DayInterval | undefined;
        }>;
        includedItems: Record<string, {
            repeat?: "never" | DayInterval | undefined;
            expires?: "never" | "when-purchase-expires" | "when-repeated" | undefined;
            quantity: number;
        }>;
    }>;
    items: Record<string, {
        displayName?: string | undefined;
        customerType?: "team" | "user" | "custom" | undefined;
    }>;
}, yup.AnyObject, {
    autoPay: {
        interval: undefined;
    };
    groups: undefined;
    offers: undefined;
    items: undefined;
}, "">;
declare const branchConfigSchema: yup.Schema<Omit<Omit<{
    sourceOfTruth: {
        type: "hosted";
    } | {
        type: "neon";
        connectionStrings: Record<string, string>;
    } | {
        type: "postgres";
        connectionString: string;
    };
}, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
    domains: {
        allowLocalhost?: boolean | undefined;
    };
    teams: {
        createPersonalTeamOnSignUp?: boolean | undefined;
        allowClientTeamCreation?: boolean | undefined;
    };
    rbac: {
        permissions: Record<string, {
            description?: string | undefined;
            scope?: "team" | "project" | undefined;
            containedPermissionIds?: Record<string, true | undefined> | undefined;
        } | undefined>;
        defaultPermissions: {
            teamCreator: Record<string, true | undefined>;
            teamMember: Record<string, true | undefined>;
            signUp: Record<string, true | undefined>;
        };
    };
    apiKeys: {
        enabled: {
            team?: boolean | undefined;
            user?: boolean | undefined;
        };
    };
    auth: {
        allowSignUp?: boolean | undefined;
        password: {
            allowSignIn?: boolean | undefined;
        };
        otp: {
            allowSignIn?: boolean | undefined;
        };
        passkey: {
            allowSignIn?: boolean | undefined;
        };
        oauth: {
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        };
    };
    payments: {
        autoPay?: {
            interval?: DayInterval | undefined;
        } | undefined;
        items: Record<string, {
            displayName?: string | undefined;
            customerType?: "team" | "user" | "custom" | undefined;
        }>;
        groups: Record<string, {
            displayName?: string | undefined;
        }>;
        offers: Record<string, {
            displayName?: string | undefined;
            serverOnly?: boolean | undefined;
            freeTrial?: DayInterval | undefined;
            groupId?: string | undefined;
            isAddOnTo?: false | Record<string, true> | undefined;
            stackable?: boolean | undefined;
            customerType: "team" | "user" | "custom";
            prices: "include-by-default" | Record<string, {
                USD?: string | undefined;
                EUR?: string | undefined;
                GBP?: string | undefined;
                JPY?: string | undefined;
                INR?: string | undefined;
                AUD?: string | undefined;
                CAD?: string | undefined;
                interval?: DayInterval | undefined;
                serverOnly?: boolean | undefined;
                freeTrial?: DayInterval | undefined;
            }>;
            includedItems: Record<string, {
                repeat?: "never" | DayInterval | undefined;
                expires?: "never" | "when-purchase-expires" | "when-repeated" | undefined;
                quantity: number;
            }>;
        }>;
    };
    workflows: {
        availableWorkflows: Record<string, {
            displayName?: string | undefined;
            enabled?: boolean | undefined;
            tsSource?: string | undefined;
        }>;
    };
    users: {
        allowClientUserDeletion?: boolean | undefined;
    };
    emails: {
        selectedThemeId?: string | undefined;
        themes: Record<string, {
            displayName: string;
            tsxSource: string;
        }>;
        templates: Record<string, {
            themeId?: string | false | undefined;
            displayName: string;
            tsxSource: string;
        }>;
    };
    dataVault: {
        stores: Record<string, {
            displayName?: string | undefined;
        }>;
    };
}, yup.AnyObject, Omit<Omit<{
    sourceOfTruth: undefined;
}, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
    rbac: {
        permissions: undefined;
        defaultPermissions: {
            teamCreator: undefined;
            teamMember: undefined;
            signUp: undefined;
        };
    };
    teams: {
        createPersonalTeamOnSignUp: undefined;
        allowClientTeamCreation: undefined;
    };
    users: {
        allowClientUserDeletion: undefined;
    };
    apiKeys: {
        enabled: {
            team: undefined;
            user: undefined;
        };
    };
    domains: {
        allowLocalhost: undefined;
    };
    auth: {
        allowSignUp: undefined;
        password: {
            allowSignIn: undefined;
        };
        otp: {
            allowSignIn: undefined;
        };
        passkey: {
            allowSignIn: undefined;
        };
        oauth: {
            accountMergeStrategy: undefined;
            providers: undefined;
        };
    };
    emails: {
        selectedThemeId: undefined;
        themes: undefined;
        templates: undefined;
    };
    payments: {
        autoPay: {
            interval: undefined;
        };
        groups: undefined;
        offers: undefined;
        items: undefined;
    };
    dataVault: {
        stores: undefined;
    };
    workflows: {
        availableWorkflows: undefined;
    };
}, "">;
declare const environmentConfigSchema: yup.Schema<Omit<NonNullable<Omit<Omit<{
    sourceOfTruth: {
        type: "hosted";
    } | {
        type: "neon";
        connectionStrings: Record<string, string>;
    } | {
        type: "postgres";
        connectionString: string;
    };
}, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
    domains: {
        allowLocalhost?: boolean | undefined;
    };
    teams: {
        createPersonalTeamOnSignUp?: boolean | undefined;
        allowClientTeamCreation?: boolean | undefined;
    };
    rbac: {
        permissions: Record<string, {
            description?: string | undefined;
            scope?: "team" | "project" | undefined;
            containedPermissionIds?: Record<string, true | undefined> | undefined;
        } | undefined>;
        defaultPermissions: {
            teamCreator: Record<string, true | undefined>;
            teamMember: Record<string, true | undefined>;
            signUp: Record<string, true | undefined>;
        };
    };
    apiKeys: {
        enabled: {
            team?: boolean | undefined;
            user?: boolean | undefined;
        };
    };
    auth: {
        allowSignUp?: boolean | undefined;
        password: {
            allowSignIn?: boolean | undefined;
        };
        otp: {
            allowSignIn?: boolean | undefined;
        };
        passkey: {
            allowSignIn?: boolean | undefined;
        };
        oauth: {
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        };
    };
    payments: {
        autoPay?: {
            interval?: DayInterval | undefined;
        } | undefined;
        items: Record<string, {
            displayName?: string | undefined;
            customerType?: "team" | "user" | "custom" | undefined;
        }>;
        groups: Record<string, {
            displayName?: string | undefined;
        }>;
        offers: Record<string, {
            displayName?: string | undefined;
            serverOnly?: boolean | undefined;
            freeTrial?: DayInterval | undefined;
            groupId?: string | undefined;
            isAddOnTo?: false | Record<string, true> | undefined;
            stackable?: boolean | undefined;
            customerType: "team" | "user" | "custom";
            prices: "include-by-default" | Record<string, {
                USD?: string | undefined;
                EUR?: string | undefined;
                GBP?: string | undefined;
                JPY?: string | undefined;
                INR?: string | undefined;
                AUD?: string | undefined;
                CAD?: string | undefined;
                interval?: DayInterval | undefined;
                serverOnly?: boolean | undefined;
                freeTrial?: DayInterval | undefined;
            }>;
            includedItems: Record<string, {
                repeat?: "never" | DayInterval | undefined;
                expires?: "never" | "when-purchase-expires" | "when-repeated" | undefined;
                quantity: number;
            }>;
        }>;
    };
    workflows: {
        availableWorkflows: Record<string, {
            displayName?: string | undefined;
            enabled?: boolean | undefined;
            tsSource?: string | undefined;
        }>;
    };
    users: {
        allowClientUserDeletion?: boolean | undefined;
    };
    emails: {
        selectedThemeId?: string | undefined;
        themes: Record<string, {
            displayName: string;
            tsxSource: string;
        }>;
        templates: Record<string, {
            themeId?: string | false | undefined;
            displayName: string;
            tsxSource: string;
        }>;
    };
    dataVault: {
        stores: Record<string, {
            displayName?: string | undefined;
        }>;
    };
}>, "domains" | "auth" | "emails"> & {
    domains: Omit<{
        allowLocalhost?: boolean | undefined;
    }, "trustedDomains"> & {
        trustedDomains: Record<string, {
            baseUrl?: string | undefined;
            handlerPath?: string | undefined;
        }>;
    };
    auth: Omit<{
        allowSignUp?: boolean | undefined;
        password: {
            allowSignIn?: boolean | undefined;
        };
        otp: {
            allowSignIn?: boolean | undefined;
        };
        passkey: {
            allowSignIn?: boolean | undefined;
        };
        oauth: {
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        };
    }, "oauth"> & {
        oauth: Omit<{
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        }, "providers"> & {
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                clientId?: string | undefined;
                clientSecret?: string | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
                isShared?: boolean | undefined;
                facebookConfigId?: string | undefined;
                microsoftTenantId?: string | undefined;
            }>;
        };
    };
    emails: Omit<{
        selectedThemeId?: string | undefined;
        themes: Record<string, {
            displayName: string;
            tsxSource: string;
        }>;
        templates: Record<string, {
            themeId?: string | false | undefined;
            displayName: string;
            tsxSource: string;
        }>;
    }, "server"> & {
        server: {
            host?: string | undefined;
            port?: number | undefined;
            username?: string | undefined;
            password?: string | undefined;
            isShared?: boolean | undefined;
            provider?: "resend" | "smtp" | undefined;
            senderName?: string | undefined;
            senderEmail?: string | undefined;
        };
    };
}, yup.AnyObject, Omit<NonNullable<Omit<Omit<{
    sourceOfTruth: undefined;
}, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
    rbac: {
        permissions: undefined;
        defaultPermissions: {
            teamCreator: undefined;
            teamMember: undefined;
            signUp: undefined;
        };
    };
    teams: {
        createPersonalTeamOnSignUp: undefined;
        allowClientTeamCreation: undefined;
    };
    users: {
        allowClientUserDeletion: undefined;
    };
    apiKeys: {
        enabled: {
            team: undefined;
            user: undefined;
        };
    };
    domains: {
        allowLocalhost: undefined;
    };
    auth: {
        allowSignUp: undefined;
        password: {
            allowSignIn: undefined;
        };
        otp: {
            allowSignIn: undefined;
        };
        passkey: {
            allowSignIn: undefined;
        };
        oauth: {
            accountMergeStrategy: undefined;
            providers: undefined;
        };
    };
    emails: {
        selectedThemeId: undefined;
        themes: undefined;
        templates: undefined;
    };
    payments: {
        autoPay: {
            interval: undefined;
        };
        groups: undefined;
        offers: undefined;
        items: undefined;
    };
    dataVault: {
        stores: undefined;
    };
    workflows: {
        availableWorkflows: undefined;
    };
}>, "domains" | "auth" | "emails"> & {
    auth: Omit<NonNullable<Omit<Omit<{
        sourceOfTruth: undefined;
    }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
        rbac: {
            permissions: undefined;
            defaultPermissions: {
                teamCreator: undefined;
                teamMember: undefined;
                signUp: undefined;
            };
        };
        teams: {
            createPersonalTeamOnSignUp: undefined;
            allowClientTeamCreation: undefined;
        };
        users: {
            allowClientUserDeletion: undefined;
        };
        apiKeys: {
            enabled: {
                team: undefined;
                user: undefined;
            };
        };
        domains: {
            allowLocalhost: undefined;
        };
        auth: {
            allowSignUp: undefined;
            password: {
                allowSignIn: undefined;
            };
            otp: {
                allowSignIn: undefined;
            };
            passkey: {
                allowSignIn: undefined;
            };
            oauth: {
                accountMergeStrategy: undefined;
                providers: undefined;
            };
        };
        emails: {
            selectedThemeId: undefined;
            themes: undefined;
            templates: undefined;
        };
        payments: {
            autoPay: {
                interval: undefined;
            };
            groups: undefined;
            offers: undefined;
            items: undefined;
        };
        dataVault: {
            stores: undefined;
        };
        workflows: {
            availableWorkflows: undefined;
        };
    }>, "oauth"> & {
        oauth: Omit<NonNullable<Omit<Omit<{
            sourceOfTruth: undefined;
        }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
            rbac: {
                permissions: undefined;
                defaultPermissions: {
                    teamCreator: undefined;
                    teamMember: undefined;
                    signUp: undefined;
                };
            };
            teams: {
                createPersonalTeamOnSignUp: undefined;
                allowClientTeamCreation: undefined;
            };
            users: {
                allowClientUserDeletion: undefined;
            };
            apiKeys: {
                enabled: {
                    team: undefined;
                    user: undefined;
                };
            };
            domains: {
                allowLocalhost: undefined;
            };
            auth: {
                allowSignUp: undefined;
                password: {
                    allowSignIn: undefined;
                };
                otp: {
                    allowSignIn: undefined;
                };
                passkey: {
                    allowSignIn: undefined;
                };
                oauth: {
                    accountMergeStrategy: undefined;
                    providers: undefined;
                };
            };
            emails: {
                selectedThemeId: undefined;
                themes: undefined;
                templates: undefined;
            };
            payments: {
                autoPay: {
                    interval: undefined;
                };
                groups: undefined;
                offers: undefined;
                items: undefined;
            };
            dataVault: {
                stores: undefined;
            };
            workflows: {
                availableWorkflows: undefined;
            };
        }>, "providers"> & {
            providers: undefined;
        };
    };
    emails: Omit<NonNullable<Omit<Omit<{
        sourceOfTruth: undefined;
    }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
        rbac: {
            permissions: undefined;
            defaultPermissions: {
                teamCreator: undefined;
                teamMember: undefined;
                signUp: undefined;
            };
        };
        teams: {
            createPersonalTeamOnSignUp: undefined;
            allowClientTeamCreation: undefined;
        };
        users: {
            allowClientUserDeletion: undefined;
        };
        apiKeys: {
            enabled: {
                team: undefined;
                user: undefined;
            };
        };
        domains: {
            allowLocalhost: undefined;
        };
        auth: {
            allowSignUp: undefined;
            password: {
                allowSignIn: undefined;
            };
            otp: {
                allowSignIn: undefined;
            };
            passkey: {
                allowSignIn: undefined;
            };
            oauth: {
                accountMergeStrategy: undefined;
                providers: undefined;
            };
        };
        emails: {
            selectedThemeId: undefined;
            themes: undefined;
            templates: undefined;
        };
        payments: {
            autoPay: {
                interval: undefined;
            };
            groups: undefined;
            offers: undefined;
            items: undefined;
        };
        dataVault: {
            stores: undefined;
        };
        workflows: {
            availableWorkflows: undefined;
        };
    }>, "server"> & {
        server: {
            isShared: undefined;
            provider: undefined;
            host: undefined;
            port: undefined;
            username: undefined;
            password: undefined;
            senderName: undefined;
            senderEmail: undefined;
        };
    };
    domains: Omit<NonNullable<Omit<Omit<{
        sourceOfTruth: undefined;
    }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
        rbac: {
            permissions: undefined;
            defaultPermissions: {
                teamCreator: undefined;
                teamMember: undefined;
                signUp: undefined;
            };
        };
        teams: {
            createPersonalTeamOnSignUp: undefined;
            allowClientTeamCreation: undefined;
        };
        users: {
            allowClientUserDeletion: undefined;
        };
        apiKeys: {
            enabled: {
                team: undefined;
                user: undefined;
            };
        };
        domains: {
            allowLocalhost: undefined;
        };
        auth: {
            allowSignUp: undefined;
            password: {
                allowSignIn: undefined;
            };
            otp: {
                allowSignIn: undefined;
            };
            passkey: {
                allowSignIn: undefined;
            };
            oauth: {
                accountMergeStrategy: undefined;
                providers: undefined;
            };
        };
        emails: {
            selectedThemeId: undefined;
            themes: undefined;
            templates: undefined;
        };
        payments: {
            autoPay: {
                interval: undefined;
            };
            groups: undefined;
            offers: undefined;
            items: undefined;
        };
        dataVault: {
            stores: undefined;
        };
        workflows: {
            availableWorkflows: undefined;
        };
    }>, "trustedDomains"> & {
        trustedDomains: undefined;
    };
}, "">;
declare const organizationConfigSchema: yup.Schema<Omit<NonNullable<Omit<NonNullable<Omit<Omit<{
    sourceOfTruth: {
        type: "hosted";
    } | {
        type: "neon";
        connectionStrings: Record<string, string>;
    } | {
        type: "postgres";
        connectionString: string;
    };
}, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
    domains: {
        allowLocalhost?: boolean | undefined;
    };
    teams: {
        createPersonalTeamOnSignUp?: boolean | undefined;
        allowClientTeamCreation?: boolean | undefined;
    };
    rbac: {
        permissions: Record<string, {
            description?: string | undefined;
            scope?: "team" | "project" | undefined;
            containedPermissionIds?: Record<string, true | undefined> | undefined;
        } | undefined>;
        defaultPermissions: {
            teamCreator: Record<string, true | undefined>;
            teamMember: Record<string, true | undefined>;
            signUp: Record<string, true | undefined>;
        };
    };
    apiKeys: {
        enabled: {
            team?: boolean | undefined;
            user?: boolean | undefined;
        };
    };
    auth: {
        allowSignUp?: boolean | undefined;
        password: {
            allowSignIn?: boolean | undefined;
        };
        otp: {
            allowSignIn?: boolean | undefined;
        };
        passkey: {
            allowSignIn?: boolean | undefined;
        };
        oauth: {
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        };
    };
    payments: {
        autoPay?: {
            interval?: DayInterval | undefined;
        } | undefined;
        items: Record<string, {
            displayName?: string | undefined;
            customerType?: "team" | "user" | "custom" | undefined;
        }>;
        groups: Record<string, {
            displayName?: string | undefined;
        }>;
        offers: Record<string, {
            displayName?: string | undefined;
            serverOnly?: boolean | undefined;
            freeTrial?: DayInterval | undefined;
            groupId?: string | undefined;
            isAddOnTo?: false | Record<string, true> | undefined;
            stackable?: boolean | undefined;
            customerType: "team" | "user" | "custom";
            prices: "include-by-default" | Record<string, {
                USD?: string | undefined;
                EUR?: string | undefined;
                GBP?: string | undefined;
                JPY?: string | undefined;
                INR?: string | undefined;
                AUD?: string | undefined;
                CAD?: string | undefined;
                interval?: DayInterval | undefined;
                serverOnly?: boolean | undefined;
                freeTrial?: DayInterval | undefined;
            }>;
            includedItems: Record<string, {
                repeat?: "never" | DayInterval | undefined;
                expires?: "never" | "when-purchase-expires" | "when-repeated" | undefined;
                quantity: number;
            }>;
        }>;
    };
    workflows: {
        availableWorkflows: Record<string, {
            displayName?: string | undefined;
            enabled?: boolean | undefined;
            tsSource?: string | undefined;
        }>;
    };
    users: {
        allowClientUserDeletion?: boolean | undefined;
    };
    emails: {
        selectedThemeId?: string | undefined;
        themes: Record<string, {
            displayName: string;
            tsxSource: string;
        }>;
        templates: Record<string, {
            themeId?: string | false | undefined;
            displayName: string;
            tsxSource: string;
        }>;
    };
    dataVault: {
        stores: Record<string, {
            displayName?: string | undefined;
        }>;
    };
}>, "domains" | "auth" | "emails"> & {
    domains: Omit<{
        allowLocalhost?: boolean | undefined;
    }, "trustedDomains"> & {
        trustedDomains: Record<string, {
            baseUrl?: string | undefined;
            handlerPath?: string | undefined;
        }>;
    };
    auth: Omit<{
        allowSignUp?: boolean | undefined;
        password: {
            allowSignIn?: boolean | undefined;
        };
        otp: {
            allowSignIn?: boolean | undefined;
        };
        passkey: {
            allowSignIn?: boolean | undefined;
        };
        oauth: {
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        };
    }, "oauth"> & {
        oauth: Omit<{
            accountMergeStrategy?: "link_method" | "raise_error" | "allow_duplicates" | undefined;
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
            }>;
        }, "providers"> & {
            providers: Record<string, {
                type?: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                clientId?: string | undefined;
                clientSecret?: string | undefined;
                allowSignIn?: boolean | undefined;
                allowConnectedAccounts?: boolean | undefined;
                isShared?: boolean | undefined;
                facebookConfigId?: string | undefined;
                microsoftTenantId?: string | undefined;
            }>;
        };
    };
    emails: Omit<{
        selectedThemeId?: string | undefined;
        themes: Record<string, {
            displayName: string;
            tsxSource: string;
        }>;
        templates: Record<string, {
            themeId?: string | false | undefined;
            displayName: string;
            tsxSource: string;
        }>;
    }, "server"> & {
        server: {
            host?: string | undefined;
            port?: number | undefined;
            username?: string | undefined;
            password?: string | undefined;
            isShared?: boolean | undefined;
            provider?: "resend" | "smtp" | undefined;
            senderName?: string | undefined;
            senderEmail?: string | undefined;
        };
    };
}>, never> & {}, yup.AnyObject, Omit<NonNullable<Omit<NonNullable<Omit<Omit<{
    sourceOfTruth: undefined;
}, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
    rbac: {
        permissions: undefined;
        defaultPermissions: {
            teamCreator: undefined;
            teamMember: undefined;
            signUp: undefined;
        };
    };
    teams: {
        createPersonalTeamOnSignUp: undefined;
        allowClientTeamCreation: undefined;
    };
    users: {
        allowClientUserDeletion: undefined;
    };
    apiKeys: {
        enabled: {
            team: undefined;
            user: undefined;
        };
    };
    domains: {
        allowLocalhost: undefined;
    };
    auth: {
        allowSignUp: undefined;
        password: {
            allowSignIn: undefined;
        };
        otp: {
            allowSignIn: undefined;
        };
        passkey: {
            allowSignIn: undefined;
        };
        oauth: {
            accountMergeStrategy: undefined;
            providers: undefined;
        };
    };
    emails: {
        selectedThemeId: undefined;
        themes: undefined;
        templates: undefined;
    };
    payments: {
        autoPay: {
            interval: undefined;
        };
        groups: undefined;
        offers: undefined;
        items: undefined;
    };
    dataVault: {
        stores: undefined;
    };
    workflows: {
        availableWorkflows: undefined;
    };
}>, "domains" | "auth" | "emails"> & {
    auth: Omit<NonNullable<Omit<Omit<{
        sourceOfTruth: undefined;
    }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
        rbac: {
            permissions: undefined;
            defaultPermissions: {
                teamCreator: undefined;
                teamMember: undefined;
                signUp: undefined;
            };
        };
        teams: {
            createPersonalTeamOnSignUp: undefined;
            allowClientTeamCreation: undefined;
        };
        users: {
            allowClientUserDeletion: undefined;
        };
        apiKeys: {
            enabled: {
                team: undefined;
                user: undefined;
            };
        };
        domains: {
            allowLocalhost: undefined;
        };
        auth: {
            allowSignUp: undefined;
            password: {
                allowSignIn: undefined;
            };
            otp: {
                allowSignIn: undefined;
            };
            passkey: {
                allowSignIn: undefined;
            };
            oauth: {
                accountMergeStrategy: undefined;
                providers: undefined;
            };
        };
        emails: {
            selectedThemeId: undefined;
            themes: undefined;
            templates: undefined;
        };
        payments: {
            autoPay: {
                interval: undefined;
            };
            groups: undefined;
            offers: undefined;
            items: undefined;
        };
        dataVault: {
            stores: undefined;
        };
        workflows: {
            availableWorkflows: undefined;
        };
    }>, "oauth"> & {
        oauth: Omit<NonNullable<Omit<Omit<{
            sourceOfTruth: undefined;
        }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
            rbac: {
                permissions: undefined;
                defaultPermissions: {
                    teamCreator: undefined;
                    teamMember: undefined;
                    signUp: undefined;
                };
            };
            teams: {
                createPersonalTeamOnSignUp: undefined;
                allowClientTeamCreation: undefined;
            };
            users: {
                allowClientUserDeletion: undefined;
            };
            apiKeys: {
                enabled: {
                    team: undefined;
                    user: undefined;
                };
            };
            domains: {
                allowLocalhost: undefined;
            };
            auth: {
                allowSignUp: undefined;
                password: {
                    allowSignIn: undefined;
                };
                otp: {
                    allowSignIn: undefined;
                };
                passkey: {
                    allowSignIn: undefined;
                };
                oauth: {
                    accountMergeStrategy: undefined;
                    providers: undefined;
                };
            };
            emails: {
                selectedThemeId: undefined;
                themes: undefined;
                templates: undefined;
            };
            payments: {
                autoPay: {
                    interval: undefined;
                };
                groups: undefined;
                offers: undefined;
                items: undefined;
            };
            dataVault: {
                stores: undefined;
            };
            workflows: {
                availableWorkflows: undefined;
            };
        }>, "providers"> & {
            providers: undefined;
        };
    };
    emails: Omit<NonNullable<Omit<Omit<{
        sourceOfTruth: undefined;
    }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
        rbac: {
            permissions: undefined;
            defaultPermissions: {
                teamCreator: undefined;
                teamMember: undefined;
                signUp: undefined;
            };
        };
        teams: {
            createPersonalTeamOnSignUp: undefined;
            allowClientTeamCreation: undefined;
        };
        users: {
            allowClientUserDeletion: undefined;
        };
        apiKeys: {
            enabled: {
                team: undefined;
                user: undefined;
            };
        };
        domains: {
            allowLocalhost: undefined;
        };
        auth: {
            allowSignUp: undefined;
            password: {
                allowSignIn: undefined;
            };
            otp: {
                allowSignIn: undefined;
            };
            passkey: {
                allowSignIn: undefined;
            };
            oauth: {
                accountMergeStrategy: undefined;
                providers: undefined;
            };
        };
        emails: {
            selectedThemeId: undefined;
            themes: undefined;
            templates: undefined;
        };
        payments: {
            autoPay: {
                interval: undefined;
            };
            groups: undefined;
            offers: undefined;
            items: undefined;
        };
        dataVault: {
            stores: undefined;
        };
        workflows: {
            availableWorkflows: undefined;
        };
    }>, "server"> & {
        server: {
            isShared: undefined;
            provider: undefined;
            host: undefined;
            port: undefined;
            username: undefined;
            password: undefined;
            senderName: undefined;
            senderEmail: undefined;
        };
    };
    domains: Omit<NonNullable<Omit<Omit<{
        sourceOfTruth: undefined;
    }, string>, "domains" | "teams" | "rbac" | "apiKeys" | "auth" | "payments" | "workflows" | "users" | "emails" | "dataVault"> & {
        rbac: {
            permissions: undefined;
            defaultPermissions: {
                teamCreator: undefined;
                teamMember: undefined;
                signUp: undefined;
            };
        };
        teams: {
            createPersonalTeamOnSignUp: undefined;
            allowClientTeamCreation: undefined;
        };
        users: {
            allowClientUserDeletion: undefined;
        };
        apiKeys: {
            enabled: {
                team: undefined;
                user: undefined;
            };
        };
        domains: {
            allowLocalhost: undefined;
        };
        auth: {
            allowSignUp: undefined;
            password: {
                allowSignIn: undefined;
            };
            otp: {
                allowSignIn: undefined;
            };
            passkey: {
                allowSignIn: undefined;
            };
            oauth: {
                accountMergeStrategy: undefined;
                providers: undefined;
            };
        };
        emails: {
            selectedThemeId: undefined;
            themes: undefined;
            templates: undefined;
        };
        payments: {
            autoPay: {
                interval: undefined;
            };
            groups: undefined;
            offers: undefined;
            items: undefined;
        };
        dataVault: {
            stores: undefined;
        };
        workflows: {
            availableWorkflows: undefined;
        };
    }>, "trustedDomains"> & {
        trustedDomains: undefined;
    };
}>, never> & {}, "">;
declare function migrateConfigOverride(type: "project" | "branch" | "environment" | "organization", oldUnmigratedConfigOverride: any): any;
declare const projectConfigDefaults: {
    readonly sourceOfTruth: {
        readonly type: "hosted";
        readonly connectionStrings: undefined;
        readonly connectionString: undefined;
    };
};
declare const branchConfigDefaults: {};
declare const environmentConfigDefaults: {};
declare const organizationConfigDefaults: {
    readonly rbac: {
        readonly permissions: (key: string) => {
            containedPermissionIds: (key: string) => undefined;
            description: undefined;
            scope: undefined;
        };
        readonly defaultPermissions: {
            readonly teamCreator: (key: string) => undefined;
            readonly teamMember: (key: string) => undefined;
            readonly signUp: (key: string) => undefined;
        };
    };
    readonly apiKeys: {
        readonly enabled: {
            readonly team: false;
            readonly user: false;
        };
    };
    readonly teams: {
        readonly createPersonalTeamOnSignUp: false;
        readonly allowClientTeamCreation: false;
    };
    readonly users: {
        readonly allowClientUserDeletion: false;
    };
    readonly domains: {
        readonly allowLocalhost: false;
        readonly trustedDomains: (key: string) => {
            readonly baseUrl: undefined;
            readonly handlerPath: "/handler";
        };
    };
    readonly auth: {
        readonly allowSignUp: true;
        readonly password: {
            readonly allowSignIn: false;
        };
        readonly otp: {
            readonly allowSignIn: false;
        };
        readonly passkey: {
            readonly allowSignIn: false;
        };
        readonly oauth: {
            readonly accountMergeStrategy: "link_method";
            readonly providers: (key: string) => {
                type: undefined;
                isShared: true;
                allowSignIn: false;
                allowConnectedAccounts: false;
                clientId: undefined;
                clientSecret: undefined;
                facebookConfigId: undefined;
                microsoftTenantId: undefined;
            };
        };
    };
    readonly emails: {
        readonly server: {
            readonly isShared: true;
            readonly provider: "smtp";
            readonly host: undefined;
            readonly port: undefined;
            readonly username: undefined;
            readonly password: undefined;
            readonly senderName: undefined;
            readonly senderEmail: undefined;
        };
        readonly selectedThemeId: "1df07ae6-abf3-4a40-83a5-a1a2cbe336ac";
        readonly themes: ((key: string) => {
            displayName: string;
            tsxSource: string;
        }) & {
            "1df07ae6-abf3-4a40-83a5-a1a2cbe336ac": {
                displayName: string;
                tsxSource: string;
            };
            "a0172b5d-cff0-463b-83bb-85124697373a": {
                displayName: string;
                tsxSource: string;
            };
        };
        readonly templates: ((key: string) => {
            displayName: string;
            tsxSource: string;
            themeId: undefined;
        }) & {
            "e7d009ce-8d47-4528-b245-5bf119f2ffa3": {
                displayName: string;
                tsxSource: string;
                themeId: undefined;
            };
            "a70fb3a4-56c1-4e42-af25-49d25603abd0": {
                displayName: string;
                tsxSource: string;
                themeId: undefined;
            };
            "822687fe-8d0a-4467-a0d1-416b6e639478": {
                displayName: string;
                tsxSource: string;
                themeId: undefined;
            };
            "e84de395-2076-4831-9c19-8e9a96a868e4": {
                displayName: string;
                tsxSource: string;
                themeId: undefined;
            };
            "066dd73c-36da-4fd0-b6d6-ebf87683f8bc": {
                displayName: string;
                tsxSource: string;
                themeId: undefined;
            };
        };
    };
    readonly payments: {
        readonly autoPay: undefined;
        readonly groups: (key: string) => {
            displayName: undefined;
        };
        readonly offers: (key: string) => {
            readonly displayName: string;
            readonly groupId: undefined;
            readonly customerType: "user";
            readonly freeTrial: undefined;
            readonly serverOnly: false;
            readonly stackable: undefined;
            readonly isAddOnTo: false;
            readonly prices: (key: string) => {
                interval: undefined;
                serverOnly: false;
                freeTrial: undefined;
                USD: undefined;
                EUR: undefined;
                GBP: undefined;
                JPY: undefined;
                INR: undefined;
                AUD: undefined;
                CAD: undefined;
            };
            readonly includedItems: (key: string) => {
                quantity: number;
                repeat: "never";
                expires: "when-repeated";
            };
        };
        readonly items: (key: string) => {
            readonly displayName: string;
            readonly customerType: "user";
        };
    };
    readonly dataVault: {
        readonly stores: (key: string) => {
            displayName: string;
        };
    };
    readonly workflows: {
        readonly availableWorkflows: (key: string) => {
            displayName: string;
            tsSource: string;
            enabled: false;
        };
    };
};
type ReplaceFunctionsWithObjects<T> = T & (T extends (arg: infer K extends string) => infer R ? Record<K, R> & object : unknown);
type DeepReplaceFunctionsWithObjects<T> = T extends object ? {
    [K in keyof ReplaceFunctionsWithObjects<T>]: DeepReplaceFunctionsWithObjects<ReplaceFunctionsWithObjects<T>[K]>;
} : T;
type ApplyDefaults<D extends object | ((key: string) => unknown), C extends object> = {} extends D ? C : DeepMerge<DeepReplaceFunctionsWithObjects<D>, C>;
declare function applyProjectDefaults<T extends ProjectRenderedConfigBeforeDefaults>(config: T): DeepMerge<{
    readonly sourceOfTruth: {
        readonly type: "hosted";
        readonly connectionStrings: undefined;
        readonly connectionString: undefined;
    };
}, T>;
declare function applyBranchDefaults<T extends BranchRenderedConfigBeforeDefaults>(config: T): DeepMerge<{
    readonly sourceOfTruth: {
        readonly type: "hosted";
        readonly connectionStrings: undefined;
        readonly connectionString: undefined;
    };
}, T>;
declare function applyEnvironmentDefaults<T extends EnvironmentRenderedConfigBeforeDefaults>(config: T): ApplyDefaults<typeof environmentConfigDefaults, ApplyDefaults<typeof branchConfigDefaults, ApplyDefaults<typeof projectConfigDefaults, T>>>;
declare function applyOrganizationDefaults(config: OrganizationRenderedConfigBeforeDefaults): ApplyDefaults<typeof organizationConfigDefaults, ApplyDefaults<typeof environmentConfigDefaults, ApplyDefaults<typeof branchConfigDefaults, ApplyDefaults<typeof projectConfigDefaults, OrganizationRenderedConfigBeforeDefaults>>>>;
declare function sanitizeProjectConfig<T extends ProjectRenderedConfigBeforeSanitization>(config: T): Promise<T & {
    sourceOfTruth: {
        readonly type: "neon";
        readonly connectionStrings: {
            readonly [x: string]: string;
        };
        readonly connectionString?: undefined;
    } | {
        readonly type: "postgres";
        readonly connectionString: string;
        readonly connectionStrings?: undefined;
    } | {
        readonly type: "hosted";
        readonly connectionStrings?: undefined;
        readonly connectionString?: undefined;
    };
}>;
declare function sanitizeBranchConfig<T extends BranchRenderedConfigBeforeSanitization>(config: T): Promise<T & {
    sourceOfTruth: {
        readonly type: "neon";
        readonly connectionStrings: {
            readonly [x: string]: string;
        };
        readonly connectionString?: undefined;
    } | {
        readonly type: "postgres";
        readonly connectionString: string;
        readonly connectionStrings?: undefined;
    } | {
        readonly type: "hosted";
        readonly connectionStrings?: undefined;
        readonly connectionString?: undefined;
    };
}>;
declare function sanitizeEnvironmentConfig<T extends EnvironmentRenderedConfigBeforeSanitization>(config: T): Promise<T & {
    sourceOfTruth: {
        readonly type: "neon";
        readonly connectionStrings: {
            readonly [x: string]: string;
        };
        readonly connectionString?: undefined;
    } | {
        readonly type: "postgres";
        readonly connectionString: string;
        readonly connectionStrings?: undefined;
    } | {
        readonly type: "hosted";
        readonly connectionStrings?: undefined;
        readonly connectionString?: undefined;
    };
}>;
declare function sanitizeOrganizationConfig(config: OrganizationRenderedConfigBeforeSanitization): Promise<{
    emails: {
        selectedThemeId: string;
        themes: {
            [x: string]: {
                displayName: string;
                tsxSource: string;
            };
        };
        templates: {
            [x: string]: {
                displayName: string;
                tsxSource: string;
                themeId: string | false | undefined;
            };
        };
        server: {
            host: string | undefined;
            port: number | undefined;
            username: string | undefined;
            password: string | undefined;
            isShared: boolean;
            provider: "resend" | "smtp";
            senderName: string | undefined;
            senderEmail: string | undefined;
        };
    };
    payments: {
        offers: Record<string, {
            isAddOnTo: false | Record<string, true>;
            prices: "include-by-default" | Record<string, {
                USD?: string | undefined;
                EUR?: string | undefined;
                GBP?: string | undefined;
                JPY?: string | undefined;
                INR?: string | undefined;
                AUD?: string | undefined;
                CAD?: string | undefined;
                interval?: [number, "day" | "week" | "year" | "month"] | undefined;
                serverOnly: boolean;
                freeTrial?: [number, "day" | "week" | "year" | "month"] | undefined;
            }>;
            displayName: string;
            serverOnly: boolean;
            freeTrial: [number, "day" | "week" | "year" | "month"] | undefined;
            groupId: string | undefined;
            customerType: "team" | "user" | "custom";
            stackable: boolean | undefined;
            includedItems: {
                [x: string]: {
                    repeat: "never" | [number, "day" | "week" | "year" | "month"];
                    quantity: number;
                    expires: "never" | "when-purchase-expires" | "when-repeated";
                };
            };
        }>;
        items: {
            [x: string]: {
                displayName: string;
                customerType: "team" | "user" | "custom";
            };
        };
        autoPay: {
            interval?: [number, "day" | "week" | "year" | "month"] | undefined;
        } | undefined;
        groups: {
            [x: string]: {
                displayName: string | undefined;
            };
        };
    };
    sourceOfTruth: {
        type: "hosted" | "neon" | "postgres";
        connectionString: string | undefined;
        connectionStrings: {
            [x: string]: string | undefined;
        } | undefined;
    } & ({
        readonly type: "neon";
        readonly connectionStrings: {
            readonly [x: string]: string;
        };
        readonly connectionString?: undefined;
    } | {
        readonly type: "postgres";
        readonly connectionString: string;
        readonly connectionStrings?: undefined;
    } | {
        readonly type: "hosted";
        readonly connectionStrings?: undefined;
        readonly connectionString?: undefined;
    });
    domains: {
        allowLocalhost: boolean;
        trustedDomains: {
            [x: string]: {
                baseUrl: string | undefined;
                handlerPath: string;
            };
        };
    };
    teams: {
        createPersonalTeamOnSignUp: boolean;
        allowClientTeamCreation: boolean;
    };
    rbac: {
        permissions: {
            [x: string]: {
                description: string | undefined;
                scope: "team" | "project" | undefined;
                containedPermissionIds: {
                    [x: string]: true | undefined;
                };
            };
        };
        defaultPermissions: {
            teamCreator: {
                [x: string]: true | undefined;
            };
            teamMember: {
                [x: string]: true | undefined;
            };
            signUp: {
                [x: string]: true | undefined;
            };
        };
    };
    apiKeys: {
        enabled: {
            team: boolean;
            user: boolean;
        };
    };
    auth: {
        password: {
            allowSignIn: boolean;
        };
        allowSignUp: boolean;
        otp: {
            allowSignIn: boolean;
        };
        passkey: {
            allowSignIn: boolean;
        };
        oauth: {
            accountMergeStrategy: "link_method" | "raise_error" | "allow_duplicates";
            providers: {
                [x: string]: {
                    type: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch" | undefined;
                    clientId: string | undefined;
                    clientSecret: string | undefined;
                    allowSignIn: boolean;
                    allowConnectedAccounts: boolean;
                    isShared: boolean;
                    facebookConfigId: string | undefined;
                    microsoftTenantId: string | undefined;
                };
            };
        };
    };
    workflows: {
        availableWorkflows: {
            [x: string]: {
                displayName: string;
                enabled: boolean;
                tsSource: string;
            };
        };
    };
    users: {
        allowClientUserDeletion: boolean;
    };
    dataVault: {
        stores: {
            [x: string]: {
                displayName: string;
            };
        };
    };
}>;
/**
 * Does not require a base config, and hence solely relies on the override itself to validate the config. If it returns
 * no error, you know that the
 *
 * It's crucial that our DB never contains any configs that are not valid according to this function, as this would mean
 * that the config object does not satisfy the ValidatedToHaveNoConfigOverrideErrors type (which is used as an assumption
 * in a whole bunch of places in the code).
 */
declare function getConfigOverrideErrors<T extends yup.AnySchema>(schema: T, configOverride: unknown, options?: {
    allowPropertiesThatCanNoLongerBeOverridden?: boolean;
}): Promise<Result<null, string>>;
declare function assertNoConfigOverrideErrors<T extends yup.AnySchema>(schema: T, config: unknown, options?: {
    allowPropertiesThatCanNoLongerBeOverridden?: boolean;
    extraInfo?: any;
}): Promise<void>;
type _ValidatedToHaveNoConfigOverrideErrorsImpl<T> = IsUnion<T & object> extends true ? _ValidatedToHaveNoConfigOverrideErrorsImpl<CollapseObjectUnion<T & object> | Exclude<T, object>> : T extends object ? (T extends any[] ? T : {
    [K in keyof T]+?: _ValidatedToHaveNoConfigOverrideErrorsImpl<T[K]>;
}) : T;
type ValidatedToHaveNoConfigOverrideErrors<T extends yup.AnySchema> = _ValidatedToHaveNoConfigOverrideErrorsImpl<yup.InferType<T>>;
/**
 * Checks whether there are any warnings in the incomplete config. A warning doesn't stop the config from being valid,
 * but may require action regardless.
 *
 * The DB can contain configs that are not valid according to this function, as long as they are valid according to
 * the getConfigOverrideErrors function. (This is necessary, because a changing base config may make an override invalid
 * that was previously valid.)
 */
declare function getIncompleteConfigWarnings<T extends yup.AnySchema>(schema: T, incompleteConfig: Config): Promise<Result<null, string>>;
type ValidatedToHaveNoIncompleteConfigWarnings<T extends yup.AnySchema> = yup.InferType<T>;
type ProjectConfigNormalizedOverride = Expand<ValidatedToHaveNoConfigOverrideErrors<typeof projectConfigSchema>>;
type BranchConfigNormalizedOverride = Expand<ValidatedToHaveNoConfigOverrideErrors<typeof branchConfigSchema>>;
type EnvironmentConfigNormalizedOverride = Expand<ValidatedToHaveNoConfigOverrideErrors<typeof environmentConfigSchema>>;
type OrganizationConfigNormalizedOverride = Expand<ValidatedToHaveNoConfigOverrideErrors<typeof organizationConfigSchema>>;
type ProjectConfigOverride = NormalizesTo<ProjectConfigNormalizedOverride>;
type BranchConfigOverride = NormalizesTo<BranchConfigNormalizedOverride>;
type EnvironmentConfigOverride = NormalizesTo<EnvironmentConfigNormalizedOverride>;
type OrganizationConfigOverride = NormalizesTo<OrganizationConfigNormalizedOverride>;
type ProjectConfigOverrideOverride = ProjectConfigOverride;
type BranchConfigOverrideOverride = BranchConfigOverride;
type EnvironmentConfigOverrideOverride = EnvironmentConfigOverride;
type OrganizationConfigOverrideOverride = OrganizationConfigOverride;
type ProjectIncompleteConfig = Expand<ProjectConfigNormalizedOverride>;
type BranchIncompleteConfig = Expand<ProjectIncompleteConfig & BranchConfigNormalizedOverride>;
type EnvironmentIncompleteConfig = Expand<BranchIncompleteConfig & EnvironmentConfigNormalizedOverride>;
type OrganizationIncompleteConfig = Expand<EnvironmentIncompleteConfig & OrganizationConfigNormalizedOverride>;
type ProjectRenderedConfigBeforeDefaults = Omit<ProjectIncompleteConfig, keyof BranchConfigNormalizedOverride | keyof EnvironmentConfigNormalizedOverride | keyof OrganizationConfigNormalizedOverride>;
type BranchRenderedConfigBeforeDefaults = Omit<BranchIncompleteConfig, keyof EnvironmentConfigNormalizedOverride | keyof OrganizationConfigNormalizedOverride>;
type EnvironmentRenderedConfigBeforeDefaults = Omit<EnvironmentIncompleteConfig, keyof OrganizationConfigNormalizedOverride>;
type OrganizationRenderedConfigBeforeDefaults = OrganizationIncompleteConfig;
type ProjectRenderedConfigBeforeSanitization = Expand<Awaited<ReturnType<typeof applyProjectDefaults<ProjectRenderedConfigBeforeDefaults>>>>;
type BranchRenderedConfigBeforeSanitization = Expand<Awaited<ReturnType<typeof applyBranchDefaults<BranchRenderedConfigBeforeDefaults>>>>;
type EnvironmentRenderedConfigBeforeSanitization = Expand<Awaited<ReturnType<typeof applyEnvironmentDefaults<EnvironmentRenderedConfigBeforeDefaults>>>>;
type OrganizationRenderedConfigBeforeSanitization = Expand<Awaited<ReturnType<typeof applyOrganizationDefaults>>>;
type ProjectRenderedConfig = Expand<Awaited<ReturnType<typeof sanitizeProjectConfig<ProjectRenderedConfigBeforeSanitization>>>>;
type BranchRenderedConfig = Expand<Awaited<ReturnType<typeof sanitizeBranchConfig<BranchRenderedConfigBeforeSanitization>>>>;
type EnvironmentRenderedConfig = Expand<Awaited<ReturnType<typeof sanitizeEnvironmentConfig<EnvironmentRenderedConfigBeforeSanitization>>>>;
type OrganizationRenderedConfig = Expand<Awaited<ReturnType<typeof sanitizeOrganizationConfig>>>;
type CompleteConfig = OrganizationRenderedConfig;

export { type BranchConfigOverride, type BranchConfigOverrideOverride, type BranchIncompleteConfig, type BranchRenderedConfig, type CompleteConfig, type ConfigLevel, type EnvironmentConfigOverride, type EnvironmentConfigOverrideOverride, type EnvironmentIncompleteConfig, type EnvironmentRenderedConfig, type OrganizationConfigOverride, type OrganizationConfigOverrideOverride, type OrganizationIncompleteConfig, type OrganizationRenderedConfig, type ProjectConfigOverride, type ProjectConfigOverrideOverride, type ProjectIncompleteConfig, type ProjectRenderedConfig, type ValidatedToHaveNoConfigOverrideErrors, type ValidatedToHaveNoIncompleteConfigWarnings, applyBranchDefaults, applyEnvironmentDefaults, applyOrganizationDefaults, applyProjectDefaults, assertNoConfigOverrideErrors, branchConfigSchema, branchPaymentsSchema, configLevels, environmentConfigSchema, getConfigOverrideErrors, getIncompleteConfigWarnings, migrateConfigOverride, organizationConfigSchema, projectConfigSchema, sanitizeBranchConfig, sanitizeEnvironmentConfig, sanitizeOrganizationConfig, sanitizeProjectConfig };
