// src/utils/jwt.tsx
import crypto from "crypto";
import elliptic from "elliptic";
import * as jose from "jose";
import { JOSEError } from "jose/errors";
import { encodeBase64Url } from "./bytes.js";
import { getEnvVariable } from "./env.js";
import { StackAssertionError, errorToNiceString } from "./errors.js";
import { globalVar } from "./globals.js";
import { pick } from "./objects.js";
import { Result } from "./results.js";
import { nicify } from "./strings.js";
function getStackServerSecret() {
  const STACK_SERVER_SECRET = getEnvVariable("STACK_SERVER_SECRET");
  try {
    jose.base64url.decode(STACK_SERVER_SECRET);
  } catch (e) {
    throw new StackAssertionError("STACK_SERVER_SECRET is not valid. Please use the generateKeys script to generate a new secret.", { cause: e });
  }
  return STACK_SERVER_SECRET;
}
async function getJwtInfo(options) {
  try {
    if (typeof options.jwt !== "string") return Result.error({ error: "JWT input is not a string!", stringifiedInput: nicify(options.jwt) });
    if (!options.jwt.startsWith("ey")) return Result.error({ error: "Input is a string, but not a JWT!", input: options.jwt });
    const decodedJwt = jose.decodeJwt(options.jwt);
    return Result.ok({ payload: decodedJwt });
  } catch (e) {
    return Result.error({
      exception: errorToNiceString(e)
    });
  }
}
async function signJWT(options) {
  const privateJwks = await getPrivateJwks({ audience: options.audience });
  const privateKey = await jose.importJWK(privateJwks[0]);
  return await new jose.SignJWT(options.payload).setProtectedHeader({ alg: "ES256", kid: privateJwks[0].kid }).setIssuer(options.issuer).setIssuedAt().setAudience(options.audience).setExpirationTime(options.expirationTime || "5m").sign(privateKey);
}
async function verifyJWT(options) {
  const decodedJwt = jose.decodeJwt(options.jwt);
  const audience = decodedJwt.aud;
  if (!audience || typeof audience !== "string") {
    throw new JOSEError("Invalid JWT audience");
  }
  const jwkSet = jose.createLocalJWKSet(await getPublicJwkSet(await getPrivateJwks({ audience })));
  const verified = await jose.jwtVerify(options.jwt, jwkSet, { issuer: options.allowedIssuers });
  return verified.payload;
}
async function getPrivateJwkFromDerivedSecret(derivedSecret, kid) {
  const secretHash = await globalVar.crypto.subtle.digest("SHA-256", jose.base64url.decode(derivedSecret));
  const priv = new Uint8Array(secretHash);
  const ec = new elliptic.ec("p256");
  const key = ec.keyFromPrivate(priv);
  const publicKey = key.getPublic();
  return {
    kty: "EC",
    crv: "P-256",
    alg: "ES256",
    kid,
    d: encodeBase64Url(priv),
    x: encodeBase64Url(publicKey.getX().toBuffer()),
    y: encodeBase64Url(publicKey.getY().toBuffer())
  };
}
async function getPrivateJwks(options) {
  const getHashOfJwkInfo = (type) => jose.base64url.encode(
    crypto.createHash("sha256").update(JSON.stringify([type, getStackServerSecret(), {
      audience: options.audience
    }])).digest()
  );
  const perAudienceSecret = getHashOfJwkInfo("stack-jwk-audience-secret");
  const perAudienceKid = getHashOfJwkInfo("stack-jwk-kid").slice(0, 12);
  const oldPerAudienceSecret = oldGetPerAudienceSecret({ audience: options.audience });
  const oldPerAudienceKid = oldGetKid({ secret: oldPerAudienceSecret });
  return [
    // TODO next-release: make this not take precedence; then, in the release after that, remove it entirely
    await getPrivateJwkFromDerivedSecret(oldPerAudienceSecret, oldPerAudienceKid),
    await getPrivateJwkFromDerivedSecret(perAudienceSecret, perAudienceKid)
  ];
}
async function getPublicJwkSet(privateJwks) {
  return {
    keys: privateJwks.map((jwk) => pick(jwk, ["kty", "alg", "crv", "x", "y", "kid"]))
  };
}
function oldGetPerAudienceSecret(options) {
  if (options.audience === "kid") {
    throw new StackAssertionError("You cannot use the 'kid' audience for a per-audience secret, see comment below in jwt.tsx");
  }
  return jose.base64url.encode(
    crypto.createHash("sha256").update(JSON.stringify([getStackServerSecret(), options.audience])).digest()
  );
}
function oldGetKid(options) {
  return jose.base64url.encode(
    crypto.createHash("sha256").update(JSON.stringify([options.secret, "kid"])).digest()
  ).slice(0, 12);
}
export {
  getJwtInfo,
  getPrivateJwks,
  getPublicJwkSet,
  oldGetKid,
  signJWT,
  verifyJWT
};
//# sourceMappingURL=jwt.js.map