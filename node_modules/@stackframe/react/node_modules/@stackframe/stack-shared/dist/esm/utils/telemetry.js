// src/utils/telemetry.tsx
import { trace } from "@opentelemetry/api";
import { getEnvVariable } from "./env.js";
import { StackAssertionError } from "./errors.js";
var tracer = trace.getTracer("stack-tracer");
function withTraceSpan(optionsOrDescription, fn) {
  return async (...args) => {
    return await traceSpan(optionsOrDescription, (span) => fn(...args));
  };
}
async function traceSpan(optionsOrDescription, fn) {
  let options = typeof optionsOrDescription === "string" ? { description: optionsOrDescription } : optionsOrDescription;
  return await tracer.startActiveSpan(`STACK: ${options.description}`, async (span) => {
    if (options.attributes) {
      for (const [key, value] of Object.entries(options.attributes)) {
        span.setAttribute(key, value);
      }
    }
    try {
      return await fn(span);
    } finally {
      span.end();
    }
  });
}
function log(message, attributes) {
  const span = trace.getActiveSpan();
  if (span) {
    span.addEvent(message, attributes);
  } else if (getEnvVariable("STACK_SEED_MODE", "false") !== "true") {
    throw new StackAssertionError("No active span found");
  }
}
export {
  log,
  traceSpan,
  withTraceSpan
};
//# sourceMappingURL=telemetry.js.map