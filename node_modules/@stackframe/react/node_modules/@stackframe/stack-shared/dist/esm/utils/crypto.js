// src/utils/crypto.tsx
import { encodeBase32, encodeBase64 } from "./bytes.js";
import { StackAssertionError } from "./errors.js";
import { globalVar } from "./globals.js";
import { Result } from "./results.js";
function generateRandomValues(array) {
  if (!globalVar.crypto) {
    throw new StackAssertionError("Crypto API is not available in this environment. Are you using an old browser?");
  }
  if (!globalVar.crypto.getRandomValues) {
    throw new StackAssertionError("crypto.getRandomValues is not available in this environment. Are you using an old browser?");
  }
  return globalVar.crypto.getRandomValues(array);
}
function generateSecureRandomString(minBitsOfEntropy = 224) {
  const base32CharactersCount = Math.ceil(minBitsOfEntropy / 5);
  const bytesCount = Math.ceil(base32CharactersCount * 5 / 8);
  const randomBytes = generateRandomValues(new Uint8Array(bytesCount));
  const str = encodeBase32(randomBytes);
  return str.slice(str.length - base32CharactersCount).toLowerCase();
}
async function getDerivedSymmetricKey(purpose, secret, salt) {
  const originalSecretKey = await crypto.subtle.importKey("raw", typeof secret === "string" ? new TextEncoder().encode(secret) : secret, "HKDF", false, ["deriveKey"]);
  return await crypto.subtle.deriveKey(
    {
      name: "HKDF",
      salt,
      hash: "SHA-256",
      info: new TextEncoder().encode(JSON.stringify([
        "stack-crypto-helper-derived-symmetric-key",
        purpose,
        typeof secret === "string" ? "string-key" : "binary-key",
        encodeBase64(salt)
      ]))
    },
    originalSecretKey,
    { name: "AES-GCM", length: 256 },
    false,
    ["encrypt", "decrypt"]
  );
}
async function encrypt({ purpose, secret, value }) {
  const iv = crypto.getRandomValues(new Uint8Array(12));
  const salt = crypto.getRandomValues(new Uint8Array(16));
  const derivedSecretKey = await getDerivedSymmetricKey(purpose, secret, salt);
  const cipher = await crypto.subtle.encrypt({
    name: "AES-GCM",
    iv
  }, derivedSecretKey, value);
  const version = [1, 0];
  return new Uint8Array([...version, ...salt, ...iv, ...new Uint8Array(cipher)]);
}
async function decrypt({ purpose, secret, cipher }) {
  const version = cipher.slice(0, 2);
  if (version[0] !== 1 || version[1] !== 0) throw new StackAssertionError("Invalid ciphertext version in decrypt(...); expected 0x0100", { purpose });
  const salt = cipher.slice(2, 18);
  const iv = cipher.slice(18, 30);
  const cipherBytes = cipher.slice(30);
  const derivedSecretKey = await getDerivedSymmetricKey(purpose, secret, salt);
  try {
    const plaintext = await crypto.subtle.decrypt({
      name: "AES-GCM",
      iv
    }, derivedSecretKey, cipherBytes);
    return Result.ok(new Uint8Array(plaintext));
  } catch (e) {
    if (e instanceof DOMException && e.name === "OperationError") {
      return Result.error(new Error("Invalid ciphertext or secret when decrypting encrypted value", { cause: e }));
    }
    throw e;
  }
}
async function hash(options) {
  return await iteratedHash({ ...options, iterations: 1 });
}
async function iteratedHash(options) {
  const stringOrUint8ArrayToUint8Array = (value) => typeof value === "string" ? new TextEncoder().encode(value) : value;
  const stringOrUint8ArrayToBase64 = (value) => encodeBase64(stringOrUint8ArrayToUint8Array(value));
  const input = await crypto.subtle.importKey(
    "raw",
    stringOrUint8ArrayToUint8Array(options.value),
    "PBKDF2",
    false,
    ["deriveBits"]
  );
  return new Uint8Array(await crypto.subtle.deriveBits({
    name: "PBKDF2",
    salt: new TextEncoder().encode(JSON.stringify([
      "stack-crypto-helper-iterated-hash",
      options.purpose,
      stringOrUint8ArrayToBase64(options.salt ?? ""),
      stringOrUint8ArrayToBase64(options.extra ?? "")
    ])),
    iterations: options.iterations,
    hash: "SHA-256"
  }, input, 256));
}
export {
  decrypt,
  encrypt,
  generateRandomValues,
  generateSecureRandomString,
  hash,
  iteratedHash
};
//# sourceMappingURL=crypto.js.map