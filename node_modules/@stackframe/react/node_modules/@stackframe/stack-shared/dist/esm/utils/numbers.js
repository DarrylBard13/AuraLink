// src/utils/numbers.tsx
var magnitudes = [
  [1e3, "k"],
  [1e3, "M"],
  [1e3, "bn"],
  [1e3, "bln"],
  [1e3, "trln"]
];
function prettyPrintWithMagnitudes(num) {
  if (typeof num !== "number") throw new Error("Expected a number");
  if (Number.isNaN(num)) return "NaN";
  if (num < 0) return "-" + prettyPrintWithMagnitudes(-num);
  if (!Number.isFinite(num)) return "\u221E";
  let current = toFixedMax(num, 1);
  let lastSuffix = "";
  for (const [difference, suffix] of magnitudes) {
    if (+current >= difference) {
      current = toFixedMax(+current / difference, 1);
      lastSuffix = suffix;
    } else {
      break;
    }
  }
  return current + lastSuffix;
}
function toFixedMax(num, maxDecimals) {
  return num.toFixed(maxDecimals).replace(/\.?0+$/, "");
}
function numberCompare(a, b) {
  return Math.sign(a - b);
}
export {
  numberCompare,
  prettyPrintWithMagnitudes,
  toFixedMax
};
//# sourceMappingURL=numbers.js.map