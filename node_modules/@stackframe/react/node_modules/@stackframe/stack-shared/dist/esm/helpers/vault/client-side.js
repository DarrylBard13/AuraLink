// src/helpers/vault/client-side.ts
import { decodeBase64, encodeBase64 } from "../../utils/bytes.js";
import { decrypt, encrypt, hash, iteratedHash } from "../../utils/crypto.js";
var hashPurpose = "stack-data-vault-client-side-encryption-key-hash";
var encryptionSecretPurpose = "stack-data-vault-client-side-encryption-value-encryption-key-hash";
var encryptionValuePurpose = "stack-data-vault-client-side-encryption-value-encryption-value-encryption";
async function getDerivedKey(secret, key) {
  return await iteratedHash({
    purpose: encryptionSecretPurpose,
    extra: secret,
    value: key,
    iterations: 1e5
  });
}
async function hashKey(secret, key) {
  return encodeBase64(await hash({
    purpose: hashPurpose,
    extra: secret,
    value: await getDerivedKey(secret, key)
  }));
}
async function encryptValue(secret, key, value) {
  const valueEncryptionDerivedKey = await getDerivedKey(secret, key);
  const bytes = await encrypt({
    purpose: encryptionValuePurpose,
    secret: valueEncryptionDerivedKey,
    value: new TextEncoder().encode(value)
  });
  return encodeBase64(bytes);
}
async function decryptValue(secret, key, encryptedValue) {
  const valueEncryptionDerivedKey = await getDerivedKey(secret, key);
  const bytesResult = await decrypt({
    purpose: encryptionValuePurpose,
    secret: valueEncryptionDerivedKey,
    cipher: decodeBase64(encryptedValue)
  });
  if (bytesResult.status === "error") throw new Error("Data vault client-side decryption failed. Are you sure you're using the correct secret?", { cause: bytesResult.error });
  return new TextDecoder().decode(bytesResult.data);
}
export {
  decryptValue,
  encryptValue,
  hashKey
};
//# sourceMappingURL=client-side.js.map