// src/utils/featurebase.tsx
import { getEnvVariable } from "./env.js";
import { StackAssertionError } from "./errors.js";
async function findFeaturebaseUserById(stackAuthUserId, apiKey) {
  try {
    const response = await fetch(`https://do.featurebase.app/v2/organization/identifyUser?id=${stackAuthUserId}`, {
      method: "GET",
      headers: {
        "X-API-Key": apiKey
      }
    });
    if (response.status === 404) {
      return null;
    }
    if (!response.ok) {
      throw new StackAssertionError(`Failed to find Featurebase user by ID: ${response.statusText}`);
    }
    const data = await response.json();
    const user = data.user;
    if (!user) {
      throw new StackAssertionError(`Featurebase API returned success but no user data for ID: ${stackAuthUserId}`, { data });
    }
    return {
      userId: user.externalUserId || user.userId || stackAuthUserId,
      email: user.email,
      name: user.name,
      profilePicture: user.profilePicture
    };
  } catch (error) {
    if (error instanceof StackAssertionError) {
      throw error;
    }
    throw new StackAssertionError("Failed to find Featurebase user by ID", { cause: error });
  }
}
async function findFeaturebaseUserByEmail(email, apiKey) {
  try {
    const response = await fetch(`https://do.featurebase.app/v2/organization/identifyUser?email=${encodeURIComponent(email)}`, {
      method: "GET",
      headers: {
        "X-API-Key": apiKey
      }
    });
    if (response.status === 404) {
      return null;
    }
    if (!response.ok) {
      throw new StackAssertionError(`Failed to find Featurebase user by email: ${response.statusText}`);
    }
    const data = await response.json();
    const user = data.user;
    if (!user) {
      throw new StackAssertionError(`Featurebase API returned success but no user data for email: ${email}`, { data });
    }
    return {
      userId: user.externalUserId || user.userId,
      email: user.email,
      name: user.name,
      profilePicture: user.profilePicture
    };
  } catch (error) {
    console.error("Error finding Featurebase user by email:", error);
    return null;
  }
}
async function createFeaturebaseUser(user, apiKey) {
  try {
    const response = await fetch("https://do.featurebase.app/v2/organization/identifyUser", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": apiKey
      },
      body: JSON.stringify({
        userId: user.userId,
        email: user.email,
        name: user.name,
        profilePicture: user.profilePicture
      })
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new StackAssertionError(`Failed to create Featurebase user: ${errorData.error || response.statusText}`, { errorData });
    }
    return user;
  } catch (error) {
    if (error instanceof StackAssertionError) {
      throw error;
    }
    throw new StackAssertionError("Failed to create Featurebase user", { cause: error });
  }
}
async function updateFeaturebaseUser(userId, updates, apiKey) {
  try {
    const response = await fetch(`https://do.featurebase.app/v2/users/${userId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": apiKey
      },
      body: JSON.stringify(updates)
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new StackAssertionError(`Failed to update Featurebase user: ${errorData.error || response.statusText}`, { errorData });
    }
    const data = await response.json();
    return {
      userId: data.userId || userId,
      email: data.email,
      name: data.name,
      profilePicture: data.profilePicture
    };
  } catch (error) {
    if (error instanceof StackAssertionError) {
      throw error;
    }
    throw new StackAssertionError("Failed to update Featurebase user", { cause: error });
  }
}
async function getOrCreateFeaturebaseUser(stackAuthUser, options) {
  const apiKey = options?.apiKey || getEnvVariable("STACK_FEATUREBASE_API_KEY");
  const fallbackEmail = `${stackAuthUser.id}@featurebase-user.stack-auth-app.com`;
  const existingById = await findFeaturebaseUserById(stackAuthUser.id, apiKey);
  if (existingById) {
    let ensuredEmail = existingById.email;
    if (!ensuredEmail) {
      try {
        await createFeaturebaseUser({
          userId: existingById.userId,
          email: fallbackEmail,
          name: stackAuthUser.displayName || void 0,
          profilePicture: stackAuthUser.profileImageUrl || void 0
        }, apiKey);
        ensuredEmail = fallbackEmail;
      } catch (e) {
        throw new StackAssertionError(`Failed to set fallback email for existing Featurebase user ${existingById.userId}`, { cause: e });
      }
    }
    try {
      const updates = {};
      if (stackAuthUser.displayName && stackAuthUser.displayName !== existingById.name) {
        updates.name = stackAuthUser.displayName;
      }
      if (stackAuthUser.profileImageUrl && stackAuthUser.profileImageUrl !== existingById.profilePicture) {
        updates.profilePicture = stackAuthUser.profileImageUrl;
      }
      if (Object.keys(updates).length > 0) {
        await updateFeaturebaseUser(existingById.userId, updates, apiKey);
      }
    } catch (error) {
      console.error("Failed to update existing Featurebase user profile:", error);
    }
    return {
      userId: existingById.userId,
      email: ensuredEmail
    };
  }
  const candidateEmail = stackAuthUser.primaryEmail ?? fallbackEmail;
  const existingByEmail = await findFeaturebaseUserByEmail(candidateEmail, apiKey);
  const safeEmail = existingByEmail ? fallbackEmail : candidateEmail;
  const created = await createFeaturebaseUser({
    userId: stackAuthUser.id,
    email: safeEmail,
    name: stackAuthUser.displayName || stackAuthUser.primaryEmail?.split("@")[0] || "User",
    profilePicture: stackAuthUser.profileImageUrl || void 0
  }, apiKey);
  return {
    userId: created.userId,
    email: created.email
  };
}
export {
  getOrCreateFeaturebaseUser
};
//# sourceMappingURL=featurebase.js.map