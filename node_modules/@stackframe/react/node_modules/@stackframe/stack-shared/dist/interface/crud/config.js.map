{"version":3,"sources":["../../../src/interface/crud/config.ts"],"sourcesContent":["import { CrudTypeOf, createCrud } from \"../../crud\";\nimport * as schemaFields from \"../../schema-fields\";\nimport { yupObject } from \"../../schema-fields\";\n\nexport const configOverrideCrudAdminReadSchema = yupObject({}).defined();\n\nexport const configOverrideCrudAdminUpdateSchema = yupObject({\n  config_override_string: schemaFields.yupString().optional(),\n}).defined();\n\nexport const configOverrideCrud = createCrud({\n  adminReadSchema: configOverrideCrudAdminReadSchema,\n  adminUpdateSchema: configOverrideCrudAdminUpdateSchema,\n  docs: {\n    adminUpdate: {\n      summary: 'Update the config',\n      description: 'Update the config for a project and branch with an override',\n      tags: ['Config'],\n    },\n  },\n});\nexport type ConfigOverrideCrud = CrudTypeOf<typeof configOverrideCrud>;\n\nexport const configCrudAdminReadSchema = yupObject({\n  config_string: schemaFields.yupString().defined(),\n}).defined();\n\nexport const configCrud = createCrud({\n  adminReadSchema: configCrudAdminReadSchema,\n  docs: {\n    adminRead: {\n      summary: 'Get the config',\n      description: 'Get the config for a project and branch',\n      tags: ['Config'],\n    },\n  },\n});\nexport type ConfigCrud = CrudTypeOf<typeof configCrud>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAuC;AACvC,mBAA8B;AAC9B,2BAA0B;AAEnB,IAAM,wCAAoC,gCAAU,CAAC,CAAC,EAAE,QAAQ;AAEhE,IAAM,0CAAsC,gCAAU;AAAA,EAC3D,wBAAqC,uBAAU,EAAE,SAAS;AAC5D,CAAC,EAAE,QAAQ;AAEJ,IAAM,yBAAqB,wBAAW;AAAA,EAC3C,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,MAAM;AAAA,IACJ,aAAa;AAAA,MACX,SAAS;AAAA,MACT,aAAa;AAAA,MACb,MAAM,CAAC,QAAQ;AAAA,IACjB;AAAA,EACF;AACF,CAAC;AAGM,IAAM,gCAA4B,gCAAU;AAAA,EACjD,eAA4B,uBAAU,EAAE,QAAQ;AAClD,CAAC,EAAE,QAAQ;AAEJ,IAAM,iBAAa,wBAAW;AAAA,EACnC,iBAAiB;AAAA,EACjB,MAAM;AAAA,IACJ,WAAW;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,MAAM,CAAC,QAAQ;AAAA,IACjB;AAAA,EACF;AACF,CAAC;","names":[]}