import { CrudSchemaFromOptions, CrudTypeOf } from '../../crud.mjs';
import * as yup from 'yup';
import '../../utils/types.mjs';
import '../../utils/strings.mjs';

declare const oauthProviderClientReadSchema: yup.ObjectSchema<{
    user_id: string;
    id: string;
    email: string | undefined;
    provider_config_id: string;
    type: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch";
    allow_sign_in: boolean;
    allow_connected_accounts: boolean;
}, yup.AnyObject, {
    user_id: undefined;
    id: undefined;
    email: undefined;
    provider_config_id: undefined;
    type: undefined;
    allow_sign_in: undefined;
    allow_connected_accounts: undefined;
}, "">;
declare const oauthProviderServerReadSchema: yup.ObjectSchema<{
    user_id: string;
    id: string;
    email: string | undefined;
    provider_config_id: string;
    type: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch";
    allow_sign_in: boolean;
    allow_connected_accounts: boolean;
} & {
    account_id: string;
}, yup.AnyObject, {
    user_id: undefined;
    id: undefined;
    email: undefined;
    provider_config_id: undefined;
    type: undefined;
    allow_sign_in: undefined;
    allow_connected_accounts: undefined;
    account_id: undefined;
}, "">;
declare const oauthProviderCrudClientUpdateSchema: yup.ObjectSchema<{
    allow_sign_in: boolean | undefined;
    allow_connected_accounts: boolean | undefined;
}, yup.AnyObject, {
    allow_sign_in: undefined;
    allow_connected_accounts: undefined;
}, "">;
declare const oauthProviderCrudServerUpdateSchema: yup.ObjectSchema<{
    allow_sign_in: boolean | undefined;
    allow_connected_accounts: boolean | undefined;
} & {
    email: string | undefined;
    account_id: string | undefined;
}, yup.AnyObject, {
    allow_sign_in: undefined;
    allow_connected_accounts: undefined;
    email: undefined;
    account_id: undefined;
}, "">;
declare const oauthProviderCrudServerCreateSchema: yup.ObjectSchema<{
    user_id: string;
    provider_config_id: string;
    email: string | undefined;
    allow_sign_in: boolean;
    allow_connected_accounts: boolean;
    account_id: string;
}, yup.AnyObject, {
    user_id: undefined;
    provider_config_id: undefined;
    email: undefined;
    allow_sign_in: undefined;
    allow_connected_accounts: undefined;
    account_id: undefined;
}, "">;
declare const oauthProviderCrudClientDeleteSchema: yup.MixedSchema<{} | undefined, yup.AnyObject, undefined, "">;
declare const oauthProviderCrud: CrudSchemaFromOptions<{
    clientReadSchema: yup.ObjectSchema<{
        user_id: string;
        id: string;
        email: string | undefined;
        provider_config_id: string;
        type: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch";
        allow_sign_in: boolean;
        allow_connected_accounts: boolean;
    }, yup.AnyObject, {
        user_id: undefined;
        id: undefined;
        email: undefined;
        provider_config_id: undefined;
        type: undefined;
        allow_sign_in: undefined;
        allow_connected_accounts: undefined;
    }, "">;
    clientUpdateSchema: yup.ObjectSchema<{
        allow_sign_in: boolean | undefined;
        allow_connected_accounts: boolean | undefined;
    }, yup.AnyObject, {
        allow_sign_in: undefined;
        allow_connected_accounts: undefined;
    }, "">;
    clientDeleteSchema: yup.MixedSchema<{} | undefined, yup.AnyObject, undefined, "">;
    serverReadSchema: yup.ObjectSchema<{
        user_id: string;
        id: string;
        email: string | undefined;
        provider_config_id: string;
        type: "apple" | "x" | "google" | "github" | "microsoft" | "spotify" | "facebook" | "discord" | "gitlab" | "bitbucket" | "linkedin" | "twitch";
        allow_sign_in: boolean;
        allow_connected_accounts: boolean;
    } & {
        account_id: string;
    }, yup.AnyObject, {
        user_id: undefined;
        id: undefined;
        email: undefined;
        provider_config_id: undefined;
        type: undefined;
        allow_sign_in: undefined;
        allow_connected_accounts: undefined;
        account_id: undefined;
    }, "">;
    serverUpdateSchema: yup.ObjectSchema<{
        allow_sign_in: boolean | undefined;
        allow_connected_accounts: boolean | undefined;
    } & {
        email: string | undefined;
        account_id: string | undefined;
    }, yup.AnyObject, {
        allow_sign_in: undefined;
        allow_connected_accounts: undefined;
        email: undefined;
        account_id: undefined;
    }, "">;
    serverCreateSchema: yup.ObjectSchema<{
        user_id: string;
        provider_config_id: string;
        email: string | undefined;
        allow_sign_in: boolean;
        allow_connected_accounts: boolean;
        account_id: string;
    }, yup.AnyObject, {
        user_id: undefined;
        provider_config_id: undefined;
        email: undefined;
        allow_sign_in: undefined;
        allow_connected_accounts: undefined;
        account_id: undefined;
    }, "">;
    docs: {
        clientRead: {
            summary: string;
            description: string;
            tags: string[];
        };
        serverCreate: {
            summary: string;
            description: string;
            tags: string[];
        };
        serverUpdate: {
            summary: string;
            description: string;
            tags: string[];
        };
        clientDelete: {
            summary: string;
            description: string;
            tags: string[];
        };
        clientList: {
            summary: string;
            description: string;
            tags: string[];
        };
    };
}>;
type OAuthProviderCrud = CrudTypeOf<typeof oauthProviderCrud>;

export { type OAuthProviderCrud, oauthProviderClientReadSchema, oauthProviderCrud, oauthProviderCrudClientDeleteSchema, oauthProviderCrudClientUpdateSchema, oauthProviderCrudServerCreateSchema, oauthProviderCrudServerUpdateSchema, oauthProviderServerReadSchema };
