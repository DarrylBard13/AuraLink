"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/interface/crud/config.ts
var config_exports = {};
__export(config_exports, {
  configCrud: () => configCrud,
  configCrudAdminReadSchema: () => configCrudAdminReadSchema,
  configOverrideCrud: () => configOverrideCrud,
  configOverrideCrudAdminReadSchema: () => configOverrideCrudAdminReadSchema,
  configOverrideCrudAdminUpdateSchema: () => configOverrideCrudAdminUpdateSchema
});
module.exports = __toCommonJS(config_exports);
var import_crud = require("../../crud.js");
var schemaFields = __toESM(require("../../schema-fields.js"));
var import_schema_fields = require("../../schema-fields.js");
var configOverrideCrudAdminReadSchema = (0, import_schema_fields.yupObject)({}).defined();
var configOverrideCrudAdminUpdateSchema = (0, import_schema_fields.yupObject)({
  config_override_string: schemaFields.yupString().optional()
}).defined();
var configOverrideCrud = (0, import_crud.createCrud)({
  adminReadSchema: configOverrideCrudAdminReadSchema,
  adminUpdateSchema: configOverrideCrudAdminUpdateSchema,
  docs: {
    adminUpdate: {
      summary: "Update the config",
      description: "Update the config for a project and branch with an override",
      tags: ["Config"]
    }
  }
});
var configCrudAdminReadSchema = (0, import_schema_fields.yupObject)({
  config_string: schemaFields.yupString().defined()
}).defined();
var configCrud = (0, import_crud.createCrud)({
  adminReadSchema: configCrudAdminReadSchema,
  docs: {
    adminRead: {
      summary: "Get the config",
      description: "Get the config for a project and branch",
      tags: ["Config"]
    }
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  configCrud,
  configCrudAdminReadSchema,
  configOverrideCrud,
  configOverrideCrudAdminReadSchema,
  configOverrideCrudAdminUpdateSchema
});
//# sourceMappingURL=config.js.map