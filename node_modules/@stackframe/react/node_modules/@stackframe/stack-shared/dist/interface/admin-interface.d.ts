import { KnownErrors } from '../known-errors.js';
import { InternalSession, AccessToken, RefreshToken } from '../sessions.js';
import { Result } from '../utils/results.js';
import { ConfigCrud, ConfigOverrideCrud } from './crud/config.js';
import { InternalEmailsCrud } from './crud/emails.js';
import { InternalApiKeysCrud } from './crud/internal-api-keys.js';
import { ProjectPermissionDefinitionsCrud } from './crud/project-permissions.js';
import { ProjectsCrud } from './crud/projects.js';
import { SvixTokenCrud } from './crud/svix-token.js';
import { TeamPermissionDefinitionsCrud } from './crud/team-permissions.js';
import { AdminTransaction } from './crud/transactions.js';
import { ServerAuthApplicationOptions, StackServerInterface } from './server-interface.js';
import './client-interface.js';
import '../utils/errors.js';
import '../utils/json.js';
import 'jose';
import '../crud.js';
import 'yup';
import '../utils/types.js';
import '../utils/strings.js';
import '../utils/dates.js';
import './crud/connected-accounts.js';
import './crud/contact-channels.js';
import './crud/current-user.js';
import './crud/items.js';
import './crud/notification-preferences.js';
import './crud/oauth-providers.js';
import './crud/sessions.js';
import './crud/team-invitation.js';
import './crud/team-member-profiles.js';
import './crud/team-memberships.js';
import './crud/teams.js';
import './crud/users.js';
import '../schema-fields.js';
import '../utils/currency-constants.js';
import '@simplewebauthn/types';
import './crud/project-api-keys.js';

type ChatContent = Array<{
    type: "text";
    text: string;
} | {
    type: "tool-call";
    toolName: string;
    toolCallId: string;
    args: any;
    argsText: string;
    result: any;
}>;
type AdminAuthApplicationOptions = ServerAuthApplicationOptions & ({
    superSecretAdminKey: string;
} | {
    projectOwnerSession: InternalSession;
});
type InternalApiKeyCreateCrudRequest = {
    has_publishable_client_key: boolean;
    has_secret_server_key: boolean;
    has_super_secret_admin_key: boolean;
    expires_at_millis: number;
    description: string;
};
type InternalApiKeyCreateCrudResponse = InternalApiKeysCrud["Admin"]["Read"] & {
    publishable_client_key?: string;
    secret_server_key?: string;
    super_secret_admin_key?: string;
};
declare class StackAdminInterface extends StackServerInterface {
    readonly options: AdminAuthApplicationOptions;
    constructor(options: AdminAuthApplicationOptions);
    sendAdminRequest(path: string, options: RequestInit, session: InternalSession | null, requestType?: "admin"): Promise<Response & {
        usedTokens: {
            accessToken: AccessToken;
            refreshToken: RefreshToken | null;
        } | null;
    }>;
    protected sendAdminRequestAndCatchKnownError<E extends typeof KnownErrors[keyof KnownErrors]>(path: string, requestOptions: RequestInit, tokenStoreOrNull: InternalSession | null, errorsToCatch: readonly E[]): Promise<Result<Response & {
        usedTokens: {
            accessToken: AccessToken;
            refreshToken: RefreshToken | null;
        } | null;
    }, InstanceType<E>>>;
    getProject(): Promise<ProjectsCrud["Admin"]["Read"]>;
    updateProject(update: ProjectsCrud["Admin"]["Update"]): Promise<ProjectsCrud["Admin"]["Read"]>;
    createInternalApiKey(options: InternalApiKeyCreateCrudRequest): Promise<InternalApiKeyCreateCrudResponse>;
    listInternalApiKeys(): Promise<InternalApiKeysCrud["Admin"]["Read"][]>;
    revokeInternalApiKeyById(id: string): Promise<void>;
    getInternalApiKey(id: string, session: InternalSession): Promise<InternalApiKeysCrud["Admin"]["Read"]>;
    listInternalEmailTemplates(): Promise<{
        id: string;
        display_name: string;
        theme_id?: string;
        tsx_source: string;
    }[]>;
    listInternalEmailDrafts(): Promise<{
        id: string;
        display_name: string;
        theme_id?: string | undefined | false;
        tsx_source: string;
        sent_at_millis?: number | null;
    }[]>;
    createEmailDraft(options: {
        display_name?: string;
        theme_id?: string | false;
        tsx_source?: string;
    }): Promise<{
        id: string;
    }>;
    updateEmailDraft(id: string, data: {
        display_name?: string;
        theme_id?: string | null | false;
        tsx_source?: string;
        sent_at_millis?: number | null;
    }): Promise<void>;
    listEmailThemes(): Promise<{
        id: string;
        display_name: string;
    }[]>;
    listTeamPermissionDefinitions(): Promise<TeamPermissionDefinitionsCrud['Admin']['Read'][]>;
    createTeamPermissionDefinition(data: TeamPermissionDefinitionsCrud['Admin']['Create']): Promise<TeamPermissionDefinitionsCrud['Admin']['Read']>;
    updateTeamPermissionDefinition(permissionId: string, data: TeamPermissionDefinitionsCrud['Admin']['Update']): Promise<TeamPermissionDefinitionsCrud['Admin']['Read']>;
    deleteTeamPermissionDefinition(permissionId: string): Promise<void>;
    listProjectPermissionDefinitions(): Promise<ProjectPermissionDefinitionsCrud['Admin']['Read'][]>;
    createProjectPermissionDefinition(data: ProjectPermissionDefinitionsCrud['Admin']['Create']): Promise<ProjectPermissionDefinitionsCrud['Admin']['Read']>;
    updateProjectPermissionDefinition(permissionId: string, data: ProjectPermissionDefinitionsCrud['Admin']['Update']): Promise<ProjectPermissionDefinitionsCrud['Admin']['Read']>;
    deleteProjectPermissionDefinition(permissionId: string): Promise<void>;
    getSvixToken(): Promise<SvixTokenCrud["Admin"]["Read"]>;
    deleteProject(): Promise<void>;
    transferProject(session: InternalSession, newTeamId: string): Promise<void>;
    getMetrics(includeAnonymous?: boolean): Promise<any>;
    sendTestEmail(data: {
        recipient_email: string;
        email_config: {
            host: string;
            port: number;
            username: string;
            password: string;
            sender_email: string;
            sender_name: string;
        };
    }): Promise<{
        success: boolean;
        error_message?: string;
    }>;
    listSentEmails(): Promise<InternalEmailsCrud["Admin"]["List"]>;
    sendSignInInvitationEmail(email: string, callbackUrl: string): Promise<void>;
    sendChatMessage(threadId: string, contextType: "email-theme" | "email-template" | "email-draft", messages: Array<{
        role: string;
        content: any;
    }>, abortSignal?: AbortSignal): Promise<{
        content: ChatContent;
    }>;
    saveChatMessage(threadId: string, message: any): Promise<void>;
    listChatMessages(threadId: string): Promise<{
        messages: Array<any>;
    }>;
    renderEmailPreview(options: {
        themeId?: string | null | false;
        themeTsxSource?: string;
        templateId?: string;
        templateTsxSource?: string;
    }): Promise<{
        html: string;
    }>;
    createEmailTheme(displayName: string): Promise<{
        id: string;
    }>;
    getEmailTheme(id: string): Promise<{
        display_name: string;
        tsx_source: string;
    }>;
    updateEmailTheme(id: string, tsxSource: string): Promise<void>;
    updateEmailTemplate(id: string, tsxSource: string, themeId: string | null | false): Promise<{
        rendered_html: string;
    }>;
    getConfig(): Promise<ConfigCrud["Admin"]["Read"]>;
    updateConfig(data: {
        configOverride: any;
    }): Promise<ConfigOverrideCrud["Admin"]["Read"]>;
    createEmailTemplate(displayName: string): Promise<{
        id: string;
    }>;
    setupPayments(): Promise<{
        url: string;
    }>;
    getStripeAccountInfo(): Promise<null | {
        account_id: string;
        charges_enabled: boolean;
        details_submitted: boolean;
        payouts_enabled: boolean;
    }>;
    createStripeWidgetAccountSession(): Promise<{
        client_secret: string;
    }>;
    listTransactions(params?: {
        cursor?: string;
        limit?: number;
        type?: 'subscription' | 'one_time' | 'item_quantity_change';
        customerType?: 'user' | 'team' | 'custom';
    }): Promise<{
        transactions: AdminTransaction[];
        nextCursor: string | null;
    }>;
    testModePurchase(options: {
        price_id: string;
        full_code: string;
        quantity?: number;
    }): Promise<void>;
}

export { type AdminAuthApplicationOptions, type ChatContent, type InternalApiKeyCreateCrudRequest, type InternalApiKeyCreateCrudResponse, StackAdminInterface };
