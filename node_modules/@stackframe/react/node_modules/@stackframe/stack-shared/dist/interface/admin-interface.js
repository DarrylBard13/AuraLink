"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/interface/admin-interface.ts
var admin_interface_exports = {};
__export(admin_interface_exports, {
  StackAdminInterface: () => StackAdminInterface
});
module.exports = __toCommonJS(admin_interface_exports);
var import_known_errors = require("../known-errors.js");
var import_results = require("../utils/results.js");
var import_server_interface = require("./server-interface.js");
var StackAdminInterface = class extends import_server_interface.StackServerInterface {
  constructor(options) {
    super(options);
    this.options = options;
  }
  async sendAdminRequest(path, options, session, requestType = "admin") {
    return await this.sendServerRequest(
      path,
      {
        ...options,
        headers: {
          "x-stack-super-secret-admin-key": "superSecretAdminKey" in this.options ? this.options.superSecretAdminKey : "",
          ...options.headers
        }
      },
      session,
      requestType
    );
  }
  async sendAdminRequestAndCatchKnownError(path, requestOptions, tokenStoreOrNull, errorsToCatch) {
    try {
      return import_results.Result.ok(await this.sendAdminRequest(path, requestOptions, tokenStoreOrNull));
    } catch (e) {
      for (const errorType of errorsToCatch) {
        if (errorType.isInstance(e)) {
          return import_results.Result.error(e);
        }
      }
      throw e;
    }
  }
  async getProject() {
    const response = await this.sendAdminRequest(
      "/internal/projects/current",
      {
        method: "GET"
      },
      null
    );
    return await response.json();
  }
  async updateProject(update) {
    const response = await this.sendAdminRequest(
      "/internal/projects/current",
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(update)
      },
      null
    );
    return await response.json();
  }
  async createInternalApiKey(options) {
    const response = await this.sendAdminRequest(
      "/internal/api-keys",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(options)
      },
      null
    );
    return await response.json();
  }
  async listInternalApiKeys() {
    const response = await this.sendAdminRequest("/internal/api-keys", {}, null);
    const result = await response.json();
    return result.items;
  }
  async revokeInternalApiKeyById(id) {
    await this.sendAdminRequest(
      `/internal/api-keys/${id}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({
          revoked: true
        })
      },
      null
    );
  }
  async getInternalApiKey(id, session) {
    const response = await this.sendAdminRequest(`/internal/api-keys/${id}`, {}, session);
    return await response.json();
  }
  async listInternalEmailTemplates() {
    const response = await this.sendAdminRequest(`/internal/email-templates`, {}, null);
    const result = await response.json();
    return result.templates;
  }
  async listInternalEmailDrafts() {
    const response = await this.sendAdminRequest(`/internal/email-drafts`, {}, null);
    const result = await response.json();
    return result.drafts;
  }
  async createEmailDraft(options) {
    const response = await this.sendAdminRequest(
      `/internal/email-drafts`,
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(options)
      },
      null
    );
    return await response.json();
  }
  async updateEmailDraft(id, data) {
    await this.sendAdminRequest(
      `/internal/email-drafts/${id}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(data)
      },
      null
    );
  }
  async listEmailThemes() {
    const response = await this.sendAdminRequest(`/internal/email-themes`, {}, null);
    const result = await response.json();
    return result.themes;
  }
  // Team permission definitions methods
  async listTeamPermissionDefinitions() {
    const response = await this.sendAdminRequest(`/team-permission-definitions`, {}, null);
    const result = await response.json();
    return result.items;
  }
  async createTeamPermissionDefinition(data) {
    const response = await this.sendAdminRequest(
      "/team-permission-definitions",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(data)
      },
      null
    );
    return await response.json();
  }
  async updateTeamPermissionDefinition(permissionId, data) {
    const response = await this.sendAdminRequest(
      `/team-permission-definitions/${permissionId}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(data)
      },
      null
    );
    return await response.json();
  }
  async deleteTeamPermissionDefinition(permissionId) {
    await this.sendAdminRequest(
      `/team-permission-definitions/${permissionId}`,
      { method: "DELETE" },
      null
    );
  }
  async listProjectPermissionDefinitions() {
    const response = await this.sendAdminRequest(`/project-permission-definitions`, {}, null);
    const result = await response.json();
    return result.items;
  }
  async createProjectPermissionDefinition(data) {
    const response = await this.sendAdminRequest(
      "/project-permission-definitions",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(data)
      },
      null
    );
    return await response.json();
  }
  async updateProjectPermissionDefinition(permissionId, data) {
    const response = await this.sendAdminRequest(
      `/project-permission-definitions/${permissionId}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(data)
      },
      null
    );
    return await response.json();
  }
  async deleteProjectPermissionDefinition(permissionId) {
    await this.sendAdminRequest(
      `/project-permission-definitions/${permissionId}`,
      { method: "DELETE" },
      null
    );
  }
  async getSvixToken() {
    const response = await this.sendAdminRequest(
      "/webhooks/svix-token",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({})
      },
      null
    );
    return await response.json();
  }
  async deleteProject() {
    await this.sendAdminRequest(
      "/internal/projects/current",
      {
        method: "DELETE"
      },
      null
    );
  }
  async transferProject(session, newTeamId) {
    await this.sendAdminRequest(
      "/internal/projects/transfer",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({
          project_id: this.options.projectId,
          new_team_id: newTeamId
        })
      },
      session
    );
  }
  async getMetrics(includeAnonymous = false) {
    const params = new URLSearchParams();
    if (includeAnonymous) {
      params.append("include_anonymous", "true");
    }
    const queryString = params.toString();
    const response = await this.sendAdminRequest(
      `/internal/metrics${queryString ? `?${queryString}` : ""}`,
      {
        method: "GET"
      },
      null
    );
    return await response.json();
  }
  async sendTestEmail(data) {
    const response = await this.sendAdminRequest(`/internal/send-test-email`, {
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(data)
    }, null);
    return await response.json();
  }
  async listSentEmails() {
    const response = await this.sendAdminRequest("/internal/emails", {
      method: "GET"
    }, null);
    return await response.json();
  }
  async sendSignInInvitationEmail(email, callbackUrl) {
    await this.sendAdminRequest(
      "/internal/send-sign-in-invitation",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          email,
          callback_url: callbackUrl
        })
      },
      null
    );
  }
  async sendChatMessage(threadId, contextType, messages, abortSignal) {
    const response = await this.sendAdminRequest(
      `/internal/ai-chat/${threadId}`,
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({ context_type: contextType, messages }),
        signal: abortSignal
      },
      null
    );
    return await response.json();
  }
  async saveChatMessage(threadId, message) {
    await this.sendAdminRequest(
      `/internal/ai-chat/${threadId}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({ message })
      },
      null
    );
  }
  async listChatMessages(threadId) {
    const response = await this.sendAdminRequest(
      `/internal/ai-chat/${threadId}`,
      { method: "GET" },
      null
    );
    return await response.json();
  }
  async renderEmailPreview(options) {
    const response = await this.sendAdminRequest(`/emails/render-email`, {
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify({
        theme_id: options.themeId,
        theme_tsx_source: options.themeTsxSource,
        template_id: options.templateId,
        template_tsx_source: options.templateTsxSource
      })
    }, null);
    return await response.json();
  }
  async createEmailTheme(displayName) {
    const response = await this.sendAdminRequest(
      `/internal/email-themes`,
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({
          display_name: displayName
        })
      },
      null
    );
    return await response.json();
  }
  async getEmailTheme(id) {
    const response = await this.sendAdminRequest(
      `/internal/email-themes/${id}`,
      { method: "GET" },
      null
    );
    return await response.json();
  }
  async updateEmailTheme(id, tsxSource) {
    await this.sendAdminRequest(
      `/internal/email-themes/${id}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({
          tsx_source: tsxSource
        })
      },
      null
    );
  }
  async updateEmailTemplate(id, tsxSource, themeId) {
    const response = await this.sendAdminRequest(
      `/internal/email-templates/${id}`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({ tsx_source: tsxSource, theme_id: themeId })
      },
      null
    );
    return await response.json();
  }
  async getConfig() {
    const response = await this.sendAdminRequest(
      `/internal/config`,
      { method: "GET" },
      null
    );
    return await response.json();
  }
  async updateConfig(data) {
    const response = await this.sendAdminRequest(
      `/internal/config/override`,
      {
        method: "PATCH",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({ config_override_string: JSON.stringify(data.configOverride) })
      },
      null
    );
    return await response.json();
  }
  async createEmailTemplate(displayName) {
    const response = await this.sendAdminRequest(
      `/internal/email-templates`,
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({
          display_name: displayName
        })
      },
      null
    );
    return await response.json();
  }
  async setupPayments() {
    const response = await this.sendAdminRequest(
      "/internal/payments/setup",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({})
      },
      null
    );
    return await response.json();
  }
  async getStripeAccountInfo() {
    const response = await this.sendAdminRequestAndCatchKnownError(
      "/internal/payments/stripe/account-info",
      {},
      null,
      [import_known_errors.KnownErrors.StripeAccountInfoNotFound]
    );
    if (response.status === "error") {
      return null;
    }
    return await response.data.json();
  }
  async createStripeWidgetAccountSession() {
    const response = await this.sendAdminRequest(
      "/internal/payments/stripe-widgets/account-session",
      {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify({})
      },
      null
    );
    return await response.json();
  }
  async listTransactions(params) {
    const qs = new URLSearchParams();
    if (params?.cursor) qs.set("cursor", params.cursor);
    if (typeof params?.limit === "number") qs.set("limit", String(params.limit));
    if (params?.type) qs.set("type", params.type);
    if (params?.customerType) qs.set("customer_type", params.customerType);
    const response = await this.sendAdminRequest(
      `/internal/payments/transactions${qs.size ? `?${qs.toString()}` : ""}`,
      { method: "GET" },
      null
    );
    const json = await response.json();
    return { transactions: json.transactions, nextCursor: json.next_cursor };
  }
  async testModePurchase(options) {
    await this.sendAdminRequest(
      "/internal/payments/test-mode-purchase-session",
      {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(options)
      },
      null
    );
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  StackAdminInterface
});
//# sourceMappingURL=admin-interface.js.map