"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/interface/crud/oauth-providers.ts
var oauth_providers_exports = {};
__export(oauth_providers_exports, {
  oauthProviderClientReadSchema: () => oauthProviderClientReadSchema,
  oauthProviderCrud: () => oauthProviderCrud,
  oauthProviderCrudClientDeleteSchema: () => oauthProviderCrudClientDeleteSchema,
  oauthProviderCrudClientUpdateSchema: () => oauthProviderCrudClientUpdateSchema,
  oauthProviderCrudServerCreateSchema: () => oauthProviderCrudServerCreateSchema,
  oauthProviderCrudServerUpdateSchema: () => oauthProviderCrudServerUpdateSchema,
  oauthProviderServerReadSchema: () => oauthProviderServerReadSchema
});
module.exports = __toCommonJS(oauth_providers_exports);
var import_crud = require("../../crud.js");
var import_schema_fields = require("../../schema-fields.js");
var oauthProviderClientReadSchema = (0, import_schema_fields.yupObject)({
  user_id: import_schema_fields.userIdOrMeSchema.defined(),
  id: import_schema_fields.oauthProviderIdSchema.defined(),
  email: import_schema_fields.oauthProviderEmailSchema.optional(),
  provider_config_id: import_schema_fields.oauthProviderProviderConfigIdSchema.defined(),
  type: import_schema_fields.oauthProviderTypeSchema.defined(),
  allow_sign_in: import_schema_fields.oauthProviderAllowSignInSchema.defined(),
  allow_connected_accounts: import_schema_fields.oauthProviderAllowConnectedAccountsSchema.defined()
}).defined();
var oauthProviderServerReadSchema = oauthProviderClientReadSchema.concat((0, import_schema_fields.yupObject)({
  account_id: import_schema_fields.oauthProviderAccountIdSchema.defined()
}));
var oauthProviderCrudClientUpdateSchema = (0, import_schema_fields.yupObject)({
  allow_sign_in: import_schema_fields.oauthProviderAllowSignInSchema.optional(),
  allow_connected_accounts: import_schema_fields.oauthProviderAllowConnectedAccountsSchema.optional()
}).defined();
var oauthProviderCrudServerUpdateSchema = oauthProviderCrudClientUpdateSchema.concat((0, import_schema_fields.yupObject)({
  email: import_schema_fields.oauthProviderEmailSchema.optional(),
  account_id: import_schema_fields.oauthProviderAccountIdSchema.optional()
}));
var oauthProviderCrudServerCreateSchema = (0, import_schema_fields.yupObject)({
  user_id: import_schema_fields.userIdOrMeSchema.defined(),
  provider_config_id: (0, import_schema_fields.yupString)().defined(),
  email: import_schema_fields.oauthProviderEmailSchema.optional(),
  allow_sign_in: import_schema_fields.oauthProviderAllowSignInSchema.defined(),
  allow_connected_accounts: import_schema_fields.oauthProviderAllowConnectedAccountsSchema.defined(),
  account_id: import_schema_fields.oauthProviderAccountIdSchema.defined()
}).defined();
var oauthProviderCrudClientDeleteSchema = (0, import_schema_fields.yupMixed)();
var oauthProviderCrud = (0, import_crud.createCrud)({
  clientReadSchema: oauthProviderClientReadSchema,
  clientUpdateSchema: oauthProviderCrudClientUpdateSchema,
  clientDeleteSchema: oauthProviderCrudClientDeleteSchema,
  serverReadSchema: oauthProviderServerReadSchema,
  serverUpdateSchema: oauthProviderCrudServerUpdateSchema,
  serverCreateSchema: oauthProviderCrudServerCreateSchema,
  docs: {
    clientRead: {
      summary: "Get an OAuth provider",
      description: "Retrieves a specific OAuth provider by the user ID and the OAuth provider ID.",
      tags: ["OAuth Providers"]
    },
    serverCreate: {
      summary: "Create an OAuth provider",
      description: "Add a new OAuth provider for a user.",
      tags: ["OAuth Providers"]
    },
    serverUpdate: {
      summary: "Update an OAuth provider",
      description: "Updates an existing OAuth provider. Only the values provided will be updated.",
      tags: ["OAuth Providers"]
    },
    clientDelete: {
      summary: "Delete an OAuth provider",
      description: "Removes an OAuth provider for a given user.",
      tags: ["OAuth Providers"]
    },
    clientList: {
      summary: "List OAuth providers",
      description: "Retrieves a list of all OAuth providers for a user.",
      tags: ["OAuth Providers"]
    }
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  oauthProviderClientReadSchema,
  oauthProviderCrud,
  oauthProviderCrudClientDeleteSchema,
  oauthProviderCrudClientUpdateSchema,
  oauthProviderCrudServerCreateSchema,
  oauthProviderCrudServerUpdateSchema,
  oauthProviderServerReadSchema
});
//# sourceMappingURL=oauth-providers.js.map